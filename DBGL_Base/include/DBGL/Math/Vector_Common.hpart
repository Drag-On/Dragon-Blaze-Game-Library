//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2014 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// This is the common header part of all Vector<T, N>
// specializations.
//
// Needed #defines:
//	T: Undefined for the general version
//	T: type, eg. "float" for a specialized version
//	RETURN_QUALIFIER: "const" if T is a pointer type
// 	RETURN_QUALIFIER: Empty otherwise
//////////////////////////////////////////////////////////////////////

public:
	/// <summary>
	/// @brief Returns the dimension of this vector
	/// </summary>
	static std::size_t getDimension();
	/// <summary>
	/// @brief Returns the squared length of this vector
	/// </summary>
	T getSquaredLength() const;
	/// <summary>
	/// @brief Returns the length of this vector
	/// </summary>
	T getLength() const;
	/// <summary>
	/// @brief Normalizes this vector so it has the length 1
	/// </summary>
	Vector<T, N>& normalize();
	/// <summary>
	/// @brief Returns a normalized copy of this vector of length 1
	/// </summary>
	Vector<T, N> getNormalized() const;
	/// <summary>
	/// @brief Returns the dot product of this vector and the
	///	       passed vector
	/// </summary>
	T dot(Vector<T, N> const& rhs) const;
	/// <summary>
	/// @brief Returns a new vector that is the cross product of
	///	       this vector and the passed vector
	/// </summary>
	Vector<T, N> cross(Vector<T, N> const& rhs) const;
	/// <summary>
	/// @brief Checks if all components are zero
	/// </summary>
	bool isZero() const;
	/// <summary>
	/// @brief Checks if other is similar to this vector
	/// @param other Other vector
	/// @param precision How close every component needs to be
	/// </summary>
	bool isSimilar(Vector<T, N> const& other,
		double precision = 0.1) const;
	/// <summary>
	/// @brief Grants access to the internal memory
	/// @return A pointer to the first element of this vector
	/// </summary>
	const T* getDataPointer() const;
	// Operators
	Vector<T, N>& operator=(Vector<T, N> const& rhs);
	RETURN_QUALIFIER Vector<T, N> operator+(Vector<T, N> const& rhs) const;
	Vector<T, N>& operator+=(Vector<T, N> const& rhs);
	RETURN_QUALIFIER Vector<T, N> operator-(Vector<T, N> const& rhs) const;
	Vector<T, N>& operator-=(Vector<T, N> const& rhs);
	RETURN_QUALIFIER T operator*(Vector<T, N> const& rhs) const;
	RETURN_QUALIFIER Vector<T, N> operator*(T const& rhs) const;
	Vector<T, N>& operator*=(T const& rhs);
	Vector<T, N>& operator*=(Vector<T, N> const& rhs);
	RETURN_QUALIFIER Vector<T, N> operator/(T const& rhs) const;
	Vector<T, N>& operator/=(T const& rhs);
	Vector<T, N> operator-() const;
	bool operator==(Vector<T, N> const& rhs) const;
	bool operator!=(Vector<T, N> const& rhs) const;
	bool operator<(Vector<T, N> const& rhs) const;
	bool operator>(Vector<T, N> const& rhs) const;
	bool operator<=(Vector<T, N> const& rhs) const;
	bool operator>=(Vector<T, N> const& rhs) const;
	T& operator[](std::size_t const& index);
	const T& operator[](std::size_t const& index) const;

private:
	T m_elements[N];