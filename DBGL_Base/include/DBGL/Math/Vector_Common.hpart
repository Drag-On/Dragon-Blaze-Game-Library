//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2014 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// This is the common header part of all Vector<T, N>
// specializations.
//
// Needed #defines:
//	T: Undefined for the general version
//	T: type, eg. "float" for a specialized version
//	RETURN_QUALIFIER: "const" if T is a pointer type
// 	RETURN_QUALIFIER: Empty otherwise
//////////////////////////////////////////////////////////////////////

public:
	/// <summary>
	/// @brief Returns the dimension of this vector
	/// </summary>
	static std::size_t getDimension();
	/// <summary>
	/// @brief Returns the squared length of this vector
	/// </summary>
	T getSquaredLength() const;
	/// <summary>
	/// @brief Returns the length of this vector
	/// </summary>
	T getLength() const;
	/// <summary>
	/// @brief Normalizes this vector so it has the length 1
	/// </summary>
	Vector<T, N>& normalize();
	/// <summary>
	/// @brief Returns a normalized copy of this vector of length 1
	/// </summary>
	Vector<T, N> getNormalized() const;
	/// <summary>
	/// @brief Returns the dot product of this vector and the
	///	       passed vector
	/// </summary>
	T dot(Vector<T, N> const& rhs) const;
	/// <summary>
	/// @brief Returns a new vector that is the cross product of
	///	       this vector and the passed vector
	/// </summary>
	Vector<T, N> cross(Vector<T, N> const& rhs) const;
	/// <summary>
	/// @brief Checks if all components are zero
	/// </summary>
	bool isZero() const;
	/// <summary>
	/// @brief Checks if other is similar to this vector
	/// @param other Other vector
	/// @param precision How close every component needs to be
	/// </summary>
	bool isSimilar(Vector<T, N> const& other,
		double precision = 0.1) const;
	/// <summary>
	/// @brief Grants access to the internal memory
	/// @return A pointer to the first element of this vector
	/// </summary>
	const T* getDataPointer() const;
	// Operators
	/// <summary>
	/// @brief Assignment operator
	/// @param rhs Other vector
	/// @return Reference to this
	/// </summary>
	Vector<T, N>& operator=(Vector<T, N> const& rhs);
	/// <summary>
	/// @brief Adds another vector to this vector
	/// @param rhs Vector to add
	/// @return The resulting vector
	/// </summary>
	RETURN_QUALIFIER Vector<T, N> operator+(Vector<T, N> const& rhs) const;
	/// <summary>
	/// @brief Adds another vector to this vector, assigning the resulting vector to this
	/// @param rhs Vector to add
	/// @return Reference to this
	/// </summary>
	Vector<T, N>& operator+=(Vector<T, N> const& rhs);
	/// <summary>
	/// @brief Subtracts another vector from this vector
	/// @param rhs Vector to subtract
	/// @return The resulting vector
	/// </summary>
	RETURN_QUALIFIER Vector<T, N> operator-(Vector<T, N> const& rhs) const;
	/// <summary>
	/// @brief Subtracts another vector from this vector, assigning the resulting vector to this
	/// @param rhs Vector to subtract
	/// @return Reference tot his
	/// </summary>
	Vector<T, N>& operator-=(Vector<T, N> const& rhs);
	/// <summary>
	/// @brief Dot product
	/// @param rhs Vector to calculate the dot product with
	/// @return Resulting scalar
	/// </summary>
	RETURN_QUALIFIER T operator*(Vector<T, N> const& rhs) const;
	/// <summary>
	/// @brief Scalar multiplication
	/// @param rhs Scalar
	/// @return Resulting vector
	/// </summary>
	RETURN_QUALIFIER Vector<T, N> operator*(T const& rhs) const;
	/// <summary>
	/// @brief Scalar multiplication, assigning the resulting vector to this
	/// @param rhs Scalar
	/// @return Reference to this
	/// </summary>
	Vector<T, N>& operator*=(T const& rhs);
	/// <summary>
	/// @brief Cross product, assigning the resulting vector to this
	/// @param rhs Other vector
	/// @return Reference to this
	/// </summary>
	Vector<T, N>& operator*=(Vector<T, N> const& rhs);
	/// <summary>
	/// @brief Scalar division
	/// @param rhs Scalar
	/// @return Resulting vector
	/// </summary>
	RETURN_QUALIFIER Vector<T, N> operator/(T const& rhs) const;
	/// <summary>
	/// @brief Scalar division, assigning the resulting vector to this
	/// @param rhs Scalar
	/// @return Reference to this
	/// </summary>
	Vector<T, N>& operator/=(T const& rhs);
	/// <summary>
	/// @brief Unary minus. Inverts the signs of all components.
	/// @return Resulting vector
	/// </summary>
	Vector<T, N> operator-() const;
	/// <summary>
	/// @brief Equality operator. Checks for value equality.
	/// @param rhs Other vector
	/// @return True if all values are equal, otherwise false
	/// </summary>
	bool operator==(Vector<T, N> const& rhs) const;
	/// <summary>
	/// @brief Inequality operator. Checks for value inequality.
	/// @param rhs Other vector
	/// @return True if not equal, otherwise false
	/// </summary>
	bool operator!=(Vector<T, N> const& rhs) const;
	/// <summary>
	/// @brief Less-than operator
	/// @param rhs Other vector
	/// @return True if the length of this vector is smaller than the length of the other vector
	/// </summary>
	bool operator<(Vector<T, N> const& rhs) const;
	/// <summary>
	/// @brief Greater-than operator
	/// @param rhs Other vector
	/// @return True if the length of this vector is greater than the length of the other vector
	/// </summary>
	bool operator>(Vector<T, N> const& rhs) const;
	/// <summary>
	/// @brief Less-or-equal-than operator
	/// @param rhs Other vector
	/// @return True if the length of this vector is smaller than or equal to the length of the other vector
	/// </summary>
	bool operator<=(Vector<T, N> const& rhs) const;
	/// <summary>
	/// @brief Greater-than-or-equal operator
	/// @param rhs Other vector
	/// @return True if the length of this vector is greater than or equal to the length of the other vector
	/// </summary>
	bool operator>=(Vector<T, N> const& rhs) const;
	/// <summary>
	/// @brief Direct access operator
	/// @param index Index of the component to access
	/// @return Reference to the requested dimension
	/// </summary>
	T& operator[](std::size_t const& index);
	/// <summary>
	/// @brief Direct access operator
	/// @param index Index of the component to access
	/// @return Reference to the requested dimension
	/// </summary>
	const T& operator[](std::size_t const& index) const;

private:
	/**
	 * @brief Array holding the components of the vector
	 */
	T m_elements[N];