//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2014 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

namespace dbgl
{
	template<typename T> Matrix4x4<T>::Matrix4x4() : BaseMatrixType()
	{
	}
	
	template<typename T> Matrix4x4<T>::Matrix4x4(const BaseMatrixType &other) : BaseMatrixType(other)
	{
	}

	template<typename T> Matrix4x4<T>::~Matrix4x4()
	{
	}
	
	template<typename T> Matrix4x4<T>& Matrix4x4<T>::transpose()
	{
		auto copy(*this); // Need old values
		for(int x = 0; x < this->getWidth(); x++)
			for(int y = 0; y < this->getHeight(); y++)
				(*this)[x][y] = copy[y][x];
		return *this;
	}
	
	template<typename T> Matrix4x4<T>& Matrix4x4<T>::invert()
	{
		auto copy(*this);
		T determinant = copy[0][0] * copy[1][1] * copy[2][2] * copy[3][3] +
						copy[0][0] * copy[2][1] * copy[3][2] * copy[1][3] +
						copy[0][0] * copy[3][2] * copy[1][2] * copy[2][3] +
						
						copy[1][0] * copy[0][1] * copy[3][2] * copy[2][3] +
						copy[1][0] * copy[2][1] * copy[0][2] * copy[3][3] +
						copy[1][0] * copy[3][1] * copy[2][2] * copy[0][3] +
						
						copy[2][0] * copy[0][1] * copy[1][2] * copy[3][3] +
						copy[2][0] * copy[1][1] * copy[3][2] * copy[0][3] +
						copy[2][0] * copy[3][1] * copy[0][2] * copy[1][3] +
						
						copy[3][0] * copy[0][1] * copy[2][2] * copy[1][3] +
						copy[3][0] * copy[1][1] * copy[0][2] * copy[2][3] +
						copy[3][0] * copy[2][1] * copy[1][2] * copy[0][3] -
						
						copy[0][0] * copy[1][1] * copy[3][2] * copy[2][3] -
						copy[0][0] * copy[2][1] * copy[1][2] * copy[3][3] -
						copy[0][0] * copy[3][1] * copy[2][2] * copy[1][3] -
						
						copy[1][0] * copy[0][1] * copy[2][2] * copy[3][3] -
						copy[1][0] * copy[2][1] * copy[3][2] * copy[0][3] -
						copy[1][0] * copy[3][1] * copy[0][2] * copy[2][3] -
						
						copy[2][0] * copy[0][1] * copy[3][2] * copy[1][3] -
						copy[2][0] * copy[1][1] * copy[0][2] * copy[3][3] -
						copy[2][0] * copy[3][1] * copy[1][2] * copy[0][3] -
						
						copy[3][0] * copy[0][1] * copy[1][2] * copy[2][3] -
						copy[3][0] * copy[1][1] * copy[2][2] * copy[0][3] -
						copy[3][0] * copy[2][1] * copy[0][2] * copy[1][3];
		if(determinant != 0)
		{
			(*this)[0][0] = copy[1][1] * copy[2][2] * copy[3][3] +
							copy[2][1] * copy[3][2] * copy[1][3] +
							copy[3][1] * copy[1][2] * copy[2][3] -
							copy[1][1] * copy[3][2] * copy[2][3] -
							copy[2][1] * copy[1][2] * copy[3][3] -
							copy[3][1] * copy[2][2] * copy[1][3];
			(*this)[1][0] = copy[1][0] * copy[3][2] * copy[2][3] +
							copy[2][0] * copy[1][2] * copy[3][3] +
							copy[3][0] * copy[2][2] * copy[1][3] -
							copy[1][0] * copy[2][2] * copy[3][3] -
							copy[2][0] * copy[3][2] * copy[1][3] -
							copy[3][0] * copy[1][2] * copy[2][3];
			(*this)[2][0] = copy[1][0] * copy[2][1] * copy[3][3] +
							copy[2][0] * copy[3][1] * copy[1][3] +
							copy[3][1] * copy[1][1] * copy[2][3] -
							copy[1][0] * copy[3][2] * copy[2][3] -
							copy[2][0] * copy[1][1] * copy[3][3] -
							copy[3][0] * copy[2][1] * copy[1][3];
			(*this)[3][0] = copy[1][0] * copy[3][1] * copy[2][2] +
							copy[2][0] * copy[1][1] * copy[3][2] +
							copy[3][0] * copy[2][1] * copy[1][2] -
							copy[1][0] * copy[2][1] * copy[3][2] -
							copy[2][0] * copy[3][1] * copy[1][2] -
							copy[3][0] * copy[1][1] * copy[2][2];
			(*this)[0][1] = copy[0][1] * copy[3][2] * copy[2][3] +
							copy[2][1] * copy[0][2] * copy[3][3] +
							copy[3][1] * copy[2][2] * copy[0][3] -
							copy[0][1] * copy[2][2] * copy[3][3] -
							copy[2][1] * copy[3][2] * copy[0][3] -
							copy[3][1] * copy[0][2] * copy[2][3];
			(*this)[1][1] = copy[0][0] * copy[2][2] * copy[3][3] +
							copy[2][0] * copy[3][2] * copy[0][3] +
							copy[3][0] * copy[0][2] * copy[2][3] -
							copy[0][0] * copy[3][2] * copy[2][3] -
							copy[2][0] * copy[0][2] * copy[3][3] -
							copy[3][0] * copy[2][2] * copy[0][3];
			(*this)[2][1] = copy[0][0] * copy[3][1] * copy[2][3] +
							copy[2][0] * copy[0][1] * copy[3][3] +
							copy[3][0] * copy[2][1] * copy[0][3] -
							copy[0][0] * copy[2][1] * copy[3][3] -
							copy[2][0] * copy[3][1] * copy[0][3] -
							copy[3][0] * copy[0][1] * copy[2][3];
			(*this)[3][1] = copy[0][0] * copy[2][1] * copy[3][2] +
							copy[2][0] * copy[3][1] * copy[0][2] +
							copy[3][0] * copy[0][1] * copy[2][2] -
							copy[0][0] * copy[3][1] * copy[2][2] -
							copy[2][0] * copy[0][1] * copy[3][2] -
							copy[3][0] * copy[2][1] * copy[0][2];
			(*this)[0][2] = copy[0][1] * copy[1][2] * copy[3][3] +
							copy[1][1] * copy[3][2] * copy[0][3] +
							copy[3][1] * copy[0][2] * copy[1][3] -
							copy[0][1] * copy[3][2] * copy[1][3] -
							copy[1][1] * copy[0][2] * copy[3][3] -
							copy[3][1] * copy[1][2] * copy[0][3];
			(*this)[1][2] = copy[0][0] * copy[3][2] * copy[1][3] +
							copy[1][0] * copy[0][2] * copy[3][3] +
							copy[3][0] * copy[1][2] * copy[0][3] -
							copy[0][0] * copy[1][2] * copy[3][3] -
							copy[1][0] * copy[3][2] * copy[0][3] -
							copy[3][0] * copy[0][2] * copy[1][3];
			(*this)[2][2] = copy[0][0] * copy[1][1] * copy[3][3] +
							copy[1][0] * copy[3][1] * copy[0][3] +
							copy[3][0] * copy[0][1] * copy[1][3] -
							copy[0][0] * copy[3][1] * copy[1][3] -
							copy[1][0] * copy[0][1] * copy[3][3] -
							copy[3][0] * copy[1][1] * copy[0][3];
			(*this)[3][2] = copy[0][0] * copy[3][1] * copy[1][2] +
							copy[1][0] * copy[0][1] * copy[3][2] +
							copy[3][0] * copy[1][1] * copy[0][2] -
							copy[0][0] * copy[1][1] * copy[3][2] -
							copy[1][0] * copy[3][1] * copy[0][2] -
							copy[3][0] * copy[0][1] * copy[1][2];
			(*this)[0][3] = copy[0][1] * copy[2][2] * copy[1][3] +
							copy[1][1] * copy[0][2] * copy[2][3] +
							copy[2][1] * copy[1][2] * copy[0][3] -
							copy[0][1] * copy[1][2] * copy[2][3] -
							copy[1][1] * copy[2][2] * copy[0][3] -
							copy[2][1] * copy[0][2] * copy[1][3];
			(*this)[1][3] = copy[0][0] * copy[1][2] * copy[2][3] +
							copy[1][0] * copy[2][2] * copy[0][3] +
							copy[2][0] * copy[0][2] * copy[1][3] -
							copy[0][0] * copy[2][2] * copy[1][3] -
							copy[1][0] * copy[0][2] * copy[2][3] -
							copy[2][0] * copy[1][2] * copy[0][3];
			(*this)[2][3] = copy[0][0] * copy[2][1] * copy[1][3] +
							copy[1][0] * copy[0][1] * copy[2][3] +
							copy[2][0] * copy[1][1] * copy[0][3] -
							copy[0][0] * copy[1][1] * copy[2][3] -
							copy[1][0] * copy[2][1] * copy[0][3] -
							copy[2][0] * copy[0][1] * copy[1][3];
			(*this)[3][3] = copy[0][0] * copy[1][1] * copy[2][2] +
							copy[1][0] * copy[2][1] * copy[0][2] +
							copy[2][0] * copy[0][1] * copy[1][2] -
							copy[0][0] * copy[2][1] * copy[1][2] -
							copy[1][0] * copy[0][1] * copy[2][2] -
							copy[2][0] * copy[1][1] * copy[0][2];
			(*this) *= 1 / determinant;
		}
		return *this;
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::getInverted() const
	{
		auto copy(*this);
		copy.invert();
		return copy;
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeTranslation(T x, T y, T z)
	{
		Matrix4x4<T> mat;
		mat[3][0] = x;
		mat[3][1] = y;
		mat[3][2] = z;
		return mat;
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeTranslation(Vector3<T> translation)
	{
		Matrix4x4<T> mat;
		mat[3][0] = translation.x();
		mat[3][1] = translation.y();
		mat[3][2] = translation.z();
		return mat;
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeRotationX(T angle)
	{
		Matrix4x4<T> mat;
		T cosAngle = cos(angle);
		T sinAngle = sin(angle);
		mat[1][1] = cosAngle;
		mat[2][1] = -sinAngle;
		mat[1][2] = sinAngle;
		mat[2][2] = cosAngle;
		return mat;
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeRotationY(T angle)
	{
		Matrix4x4<T> mat;
		T cosAngle = cos(angle);
		T sinAngle = sin(angle);
		mat[0][0] = cosAngle;
		mat[2][0] = sinAngle;
		mat[0][2] = -sinAngle;
		mat[2][2] = cosAngle;
		return mat;
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeRotationZ(T angle)
	{
		Matrix4x4<T> mat;
		T cosAngle = cos(angle);
		T sinAngle = sin(angle);
		mat[0][0] = cosAngle;
		mat[1][0] = -sinAngle;
		mat[0][1] = sinAngle;
		mat[1][1] = cosAngle;
		return mat;
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeRotation(T xAngle, T yAngle, T zAngle)
	{
	    return makeRotationZ(zAngle) * makeRotationY(yAngle) * makeRotationX(xAngle);
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeRotation(Vector3<T> vec, T angle)
	{
		vec.normalize();
		Matrix4x4<T> mat;
		T cosAngle = cos(angle);
		T sinAngle = sin(angle);
		mat[0][0] = vec[0] * vec[0] * (1 - cosAngle) + cosAngle;
		mat[1][0] = vec[0] * vec[1] * (1 - cosAngle) - vec[2] * sinAngle;
		mat[2][0] = vec[0] * vec[2] * (1 - cosAngle) + vec[1] * sinAngle;
		mat[0][1] = vec[1] * vec[0] * (1 - cosAngle) + vec[2] * sinAngle;
		mat[1][1] = vec[1] * vec[1] * (1 - cosAngle) + cosAngle;
		mat[2][1] = vec[1] * vec[2] * (1 - cosAngle) - vec[0] * sinAngle;
		mat[0][2] = vec[2] * vec[0] * (1 - cosAngle) - vec[1] * sinAngle;
		mat[1][2] = vec[2] * vec[1] * (1 - cosAngle) + vec[0] * sinAngle;
		mat[2][2] = vec[2] * vec[2] * (1 - cosAngle) + cosAngle;
		return mat;
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeScale(T factor)
	{
		Matrix4x4<T> mat;
		mat[0][0] = factor;
		mat[1][1] = factor;
		mat[2][2] = factor;
		mat[3][3] = 1;
		return mat;
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeScale(T x, T y, T z)
	{
		Matrix4x4<T> mat;
		mat[0][0] = x;
		mat[1][1] = y;
		mat[2][2] = z;
		mat[3][3] = 1;
		return mat;
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeScale(Vector3<T> scale)
	{
		Matrix4x4<T> mat;
		mat[0][0] = scale.x();
		mat[1][1] = scale.y();
		mat[2][2] = scale.z();
		mat[3][3] = 1;
		return mat;
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeView(Vector3<T> const& pos, Vector3<T> const& direction, Vector3<T> const& up)
	{
		Matrix4x4<T> mat;
		mat.view(pos, direction, up);
		return mat;
	}
	
	template<typename T> void Matrix4x4<T>::view(Vector3<T> const& pos, Vector3<T> const& direction, Vector3<T> const& up)
	{
		auto f = direction;
		f.normalize();
		auto u = up;
		u.normalize();
		auto s = f.cross(u);
		s.normalize();
		u = s.cross(f);

		(*this)[0][0] = s[0];
		(*this)[1][0] = s[1];
		(*this)[2][0] = s[2];
		(*this)[3][0] = -s * pos;
		(*this)[0][1] = u[0];
		(*this)[1][1] = u[1];
		(*this)[2][1] = u[2];
		(*this)[3][1] = -u * pos;
		(*this)[0][2] = -f[0];
		(*this)[1][2] = -f[1];
		(*this)[2][2] = -f[2];
		(*this)[3][2] = f * pos;
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeProjection(T fieldOfView, T aspectRatio, T near, T far)
	{
		Matrix4x4<T> mat;
		mat.projection(fieldOfView, aspectRatio, near, far);
		return mat;
	}
	
	template<typename T> void Matrix4x4<T>::projection(T fieldOfView, T aspectRatio, T near, T far)
	{
		T h = std::tan(pi_2() - fieldOfView / 2);
		T w = h / aspectRatio;
		(*this)[0][0] = w;
		(*this)[1][1] = h;
		(*this)[2][2] = far/(near - far);
		(*this)[3][2] = (near * far)/(near - far);
		(*this)[2][3] = -1;
		(*this)[3][3] = 0;
	}
	
	template<typename T> const Matrix4x4<T> Matrix4x4<T>::operator+(BaseMatrixType const& rhs) const
	{ 
		return BaseMatrixType::operator+(rhs);
	}
	
	template<typename T> const Matrix4x4<T> Matrix4x4<T>::operator-(BaseMatrixType const& rhs) const
	{ 
		return BaseMatrixType::operator-(rhs);
	}
	
	template<typename T> const Matrix4x4<T> Matrix4x4<T>::operator*(BaseMatrixType const& rhs) const
	{
		return BaseMatrixType::operator*(rhs);
	}
	
	template<typename T> const Vector4<T> Matrix4x4<T>::operator*(Vector<T,4> const& rhs) const
	{
		return BaseMatrixType::operator*(rhs);
	}
	
	template<typename T> const Matrix4x4<T> Matrix4x4<T>::operator*(T const& rhs) const
	{ 
		return BaseMatrixType::operator*(rhs);
	}

	
	template<typename T> Matrix4x4<T>& Matrix4x4<T>::operator*=(BaseMatrixType const& rhs)
	{
		auto copy(*this);
		for(int x = 0; x < this->getWidth(); x++)
			for(int y = 0; y < this->getHeight(); y++)
			{
				(*this)[x][y] = 0;
				for(int i = 0; i < this->getHeight(); i++)
					(*this)[x][y] += copy[i][y] * rhs[x][i];
			}
		return *this;
	}
	
	template<typename T> const Matrix4x4<T> Matrix4x4<T>::operator/(T const& rhs) const
	{ 
		return BaseMatrixType::operator/(rhs);
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::operator-() const
	{
		return BaseMatrixType::operator-();
	}
}
