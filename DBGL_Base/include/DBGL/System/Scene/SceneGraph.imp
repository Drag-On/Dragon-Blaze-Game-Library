//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2014 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

namespace dbgl
{
    template<typename T> SceneGraph<T>::Node::Node(T* entity) : m_pEntity(entity)
    {
	m_pEntity->m_pSceneNode = this;
    }

    template<typename T> SceneGraph<T>::Node::~Node()
    {
	m_pEntity->m_pSceneNode = nullptr;
    }

    template<typename T> T* SceneGraph<T>::Node::getEntity() const
    {
	return m_pEntity;
    }

    template<typename T> auto SceneGraph<T>::Node::getChildren() const -> std::set<Node*> const&
    {
	return m_childNodes;
    }

    template<typename T> void SceneGraph<T>::Node::addChild(Node* child)
    {
	child->m_pParent = this;
	m_childNodes.insert(child);
    }

    template<typename T> void SceneGraph<T>::Node::removeChild(Node* child)
    {
	child->m_pParent = nullptr;
	m_childNodes.erase(child);
    }

    template<typename T> auto SceneGraph<T>::Node::getParent() const -> Node*
    {
	return m_pParent;
    }

    template<typename T> void SceneGraph<T>::Node::setParent(Node* parent)
    {
	parent->addChild(this);
    }

    template<typename T> template<class Visitor> void SceneGraph<T>::Node::accept(Visitor& visitor)
    {
	AbstractTree::Node::accept<Visitor, Node*>(visitor);
    }

    template<typename T> SceneGraph<T>::~SceneGraph()
    {
    }

    template<typename T> void SceneGraph<T>::accept(AbstractTreeVisitor& visitor)
    {
	AbstractTree::accept(visitor);
	if (m_pRoot != nullptr)
	    m_pRoot->accept(visitor);
    }

    template<typename T> template<class Visitor> void SceneGraph<T>::accept(Visitor& visitor)
    {
	AbstractTree::accept<Visitor, SceneGraph*>(visitor);
	if (m_pRoot != nullptr)
	    m_pRoot->accept<Visitor>(visitor);
    }

    template<typename T> typename SceneGraph<T>::Node* SceneGraph<T>::getRoot() const
    {
	return m_pRoot;
    }

    template<typename T> void SceneGraph<T>::setRoot(Node* root)
    {
	m_pRoot = root;
    }

    template<typename T> T* SceneGraph<T>::getRootEntity() const
    {
	if (m_pRoot != nullptr)
	    return m_pRoot->getEntity();
	else
	    return nullptr;
    }
}


