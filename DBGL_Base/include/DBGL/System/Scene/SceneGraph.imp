//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2014 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

namespace dbgl
{
    template<typename T> SceneGraph<T>::Node::Node(T* entity) : m_pEntity(entity)
    {
	m_pEntity->m_pSceneNode = this;
    }

    template<typename T> SceneGraph<T>::Node::~Node()
    {
	m_pEntity->m_pSceneNode = nullptr;
	// Delete all child nodes
	for(auto node : m_childNodes)
	    delete node;
    }

    template<typename T> T* SceneGraph<T>::Node::getEntity() const
    {
	return m_pEntity;
    }

    template<typename T> auto SceneGraph<T>::Node::getChildren() const -> std::set<Node*> const&
    {
	return m_childNodes;
    }

    template<typename T> auto SceneGraph<T>::Node::addChild(T* child) -> Node*
    {
	auto node = new Node{child};
	node->m_pParent = this;
	m_childNodes.insert(node);
	return node;
    }

    template<typename T> void SceneGraph<T>::Node::removeChild(T* child)
    {
	for(auto it = m_nodes.begin(); it != m_nodes.end(); ++it)
	{
	    if((*it)->getEntity() == child)
	    {
		delete *it;
		m_nodes.erase(it);
		return;
	    }
	}
    }

    template<typename T> auto SceneGraph<T>::Node::getParent() const -> Node*
    {
	return m_pParent;
    }

    template<typename T> void SceneGraph<T>::Node::setParent(Node* parent)
    {
	parent->addChild(this);
    }

    template<typename T> template<class Visitor> void SceneGraph<T>::Node::accept(Visitor& visitor)
    {
	AbstractTree::Node::accept<Visitor, Node*>(visitor);
    }

    template<typename T> SceneGraph<T>::~SceneGraph()
    {
	// Delete all nodes
	for(auto node : m_nodes)
	    delete node;
    }

    template<typename T> void SceneGraph<T>::accept(AbstractTreeVisitor& visitor)
    {
	AbstractTree::accept(visitor);
	for(auto node : m_nodes)
	    node->accept(visitor);
    }

    template<typename T> template<class Visitor> void SceneGraph<T>::accept(Visitor& visitor)
    {
	AbstractTree::accept<Visitor, SceneGraph*>(visitor);
	for(auto node : m_nodes)
	    node->accept<Visitor>(visitor);
    }

    template<typename T> auto SceneGraph<T>::getNodes() const -> std::set<Node*> const&
    {
	return m_nodes;
    }

    template<typename T> auto SceneGraph<T>::addNode(T* entity) -> Node*
    {
	auto node = new Node{entity};
	m_nodes.insert(node);
	return node;
    }

    template<typename T> void SceneGraph<T>::removeNode(T* entity)
    {
	for(auto it = m_nodes.begin(); it != m_nodes.end(); ++it)
	{
	    if((*it)->getEntity() == entity)
	    {
		delete *it;
		m_nodes.erase(it);
		return;
	    }
	}
    }
}


