//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2014 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

namespace dbgl
{
	template<typename T> Vector4<T>::Vector4() : _x(0), _y(0), _z(0), _w(0)
	{
	}
	
	template<typename T> Vector4<T>::Vector4(T x, T y, T z, T w) : _x(x), _y(y), _z(z), _w(w)
	{
	}
	
	template<typename T> Vector4<T>::Vector4(const Vector4<T> &other) :_x(other[0]), _y(other[1]), _z(other[2]), _w(other[3])
	{
	}

	template<typename T> Vector4<T>::~Vector4()
	{
	}
	
	template<typename T> std::size_t Vector4<T>::getDimension() const
	{
		return 4;
	}
	
	template<typename T> T Vector4<T>::getX() const
	{
		return _x;
	}
	
	template<typename T> T Vector4<T>::getY() const
	{
		return _y;
	}
	
	template<typename T> T Vector4<T>::getZ() const
	{
		return _z;
	}
	
	template<typename T> T Vector4<T>::getW() const
	{
		return _w;
	}
	
	template<typename T> T Vector4<T>::getSquaredLength() const
	{
		T sqlen = 0;
		for(int i = 0; i < getDimension(); i++)
			sqlen += (*this)[i] * (*this)[i];
		return sqlen;
	}
	
	template<typename T> T Vector4<T>::getLength() const
	{
		return static_cast<T>(std::sqrt(static_cast<double>(getSquaredLength())));
	}
	
	template<typename T> Vector4<T>& Vector4<T>::normalize()
	{
		T length = getLength();
		for(int i = 0; i < getDimension(); i++)
			(*this)[i] /= length;
		return *this;
	}
	
	template<typename T> Vector4<T> Vector4<T>::getNormalized() const
	{
		Vector4<T> copy(*this);
		copy.normalize();
		return copy;
	}
	
	template<typename T> Vector4<T> Vector4<T>::getCrossProduct(Vector4<T> rhs)
	{
		Vector4<T> copy(*this);
		copy *= rhs;
		return copy;
	}
	
	template<typename T> bool Vector4<T>::isZero()
	{
		for(int i = 0; i < getDimension(); i++)
			if((*this)[i] != 0)
				return false;
		return true;
	}
	
	template<typename T> Vector4<T>& Vector4<T>::translate(T x, T y, T z, T w)
	{
		_x += x;
		_y += y;
		_z += z;
		_w += w;
		return *this;
	}
	
	template<typename T> Vector4<T>& Vector4<T>::operator=(Vector4<T> const& rhs) 
	{ 
		if (*this != rhs)
		{ 
			for(int i = 0; i < getDimension(); i++)
				(*this)[i] = rhs[i];
		} 
		return *this;
	}
	
	template<typename T> const Vector4<T> Vector4<T>::operator+(Vector4<T> const& rhs) 
	{ 
		Vector4<T> tmp(*this);
		tmp += rhs;
		return tmp;
	}
	
	template<typename T> Vector4<T>& Vector4<T>::operator+=(Vector4<T> const& rhs)
	{
		for(int i = 0; i < getDimension(); i++)
			(*this)[i] += rhs[i];
		return *this;
	}
	
	template<typename T> const Vector4<T> Vector4<T>::operator-(Vector4<T> const& rhs) 
	{ 
		Vector4<T> tmp(*this);
		tmp -= rhs;
		return tmp;
	}
		
	template<typename T> Vector4<T>& Vector4<T>::operator-=(Vector4<T> const& rhs)
	{
		for(int i = 0; i < getDimension(); i++)
			(*this)[i] -= rhs[i];
		return *this;
	}
	
	template<typename T> const T Vector4<T>::operator*(Vector4<T> const& rhs) 
	{
		T dotProd = 0;
		for(int i = 0; i < getDimension(); i++)
			dotProd += (*this)[i] * rhs[i];
		return dotProd;
	}
	
	template<typename T> const Vector4<T> Vector4<T>::operator*(T const& rhs) 
	{ 
		Vector4<T> tmp(*this);
		tmp *= rhs;
		return tmp;
	}
		
	template<typename T> Vector4<T>& Vector4<T>::operator*=(T const& rhs)
	{
		for(int i = 0; i < getDimension(); i++)
			(*this)[i] *= rhs;
		return *this;
	}
	
	template<typename T> Vector4<T>& Vector4<T>::operator*=(Vector4<T> const& rhs)
	{
		auto temp(*this); // Need copy of unmodified data
		for(int i = 0; i < getDimension(); i++)
		{
			int i1 = (i+1) % getDimension();
			int i2 = (i+2) % getDimension();
			(*this)[i] = temp[i1]*rhs[i2] - temp[i2]*rhs[i1];
		}
		return *this;
	}
	
	template<typename T> const Vector4<T> Vector4<T>::operator/(T const& rhs) 
	{ 
		Vector4<T> tmp(*this);
		tmp /= rhs;
		return tmp;
	}
		
	template<typename T> Vector4<T>& Vector4<T>::operator/=(T const& rhs)
	{
		for(int i = 0; i < getDimension(); i++)
			(*this)[i] /= rhs;
		return *this;
	}
	
	template<typename T> Vector4<T> Vector4<T>::operator-() const
	{
		Vector4<T> tmp(*this);
		for(int i = 0; i < getDimension(); i++)
			tmp[i] = -(*this)[i];
		return tmp;
	}
	
	template<typename T> bool Vector4<T>::operator==(Vector4<T> const& rhs)
	{
		for(int i = 0; i < getDimension(); i++)
			if((*this)[i] != rhs[i])
				return false;
		return true;
	}
	
	template<typename T> bool Vector4<T>::operator!=(Vector4<T> const& rhs)
	{
		return !(*this == rhs);
	}
	
	template<typename T> bool Vector4<T>::operator<(Vector4<T> const& rhs)
	{
		return this->getLength() < rhs.getLength();
	}
	
	template<typename T> bool Vector4<T>::operator>(Vector4<T> const& rhs)
	{
		return this->getLength() > rhs.getLength();
	}
	
	template<typename T> bool Vector4<T>::operator<=(Vector4<T> const& rhs)
	{
		return this->getLength() <= rhs.getLength();
	}
	
	template<typename T> bool Vector4<T>::operator>=(Vector4<T> const& rhs)
	{
		return this->getLength() >= rhs.getLength();
	}

	template<typename T> T& Vector4<T>::operator[](std::size_t const& index)
	{
		if(index < getDimension())
			return (&_x)[index];
		else
		{
			LOG->error("Tried to access element %d of %d-length vector!", index, getDimension());
			exit(EXIT_FAILURE);
		}
	}
	
	template<typename T> const T& Vector4<T>::operator[](std::size_t const& index) const
	{
		if(index < getDimension())
			return (&_x)[index];
		else
		{
			LOG->error("Tried to access element %d of %d-length vector!", index, getDimension());
			exit(EXIT_FAILURE);
		}
	}
}
