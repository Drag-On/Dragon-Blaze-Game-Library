//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2015 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

#ifndef INCLUDE_DBGL_CORE_MATH_HYPERPLANE_DEC_
#define INCLUDE_DBGL_CORE_MATH_HYPERPLANE_DEC_

#include "IShape.h"
#include "DBGL/Core/Math/Utility.h"
#include <limits>

namespace dbgl
{
	template<typename T, unsigned int D> class Vector;
	template<typename T, unsigned int D> class HyperRectangle;
	template<typename T, unsigned int D> class HyperSphere;

	/**
	 * @brief Basic three-dimensional plane class
	 */
	template<typename T, unsigned int D = 3> class HyperPlane: public IShape<T, D>
	{
	public:
		/**
		 * @brief Default constructor
		 */
		HyperPlane() = default;
		/**
		 * @brief Constructor
		 * @param base Base point on the plane
		 * @param normal Plane normal
		 */
		HyperPlane(Vector<T, D> const& base, Vector<T, D> const& normal);
		/**
		 * @brief Destructor
		 */
		virtual ~HyperPlane() = default;
		/**
		 * @brief Provides the plane normal
		 * @return Plane normal
		 */
		Vector<T, D>& normal();
		/**
		 * @brief Provides the plane base point
		 * @return Plane base point
		 */
		Vector<T, D>& base();
		/**
		 * @copydoc IShape::getCenter()
		 */
		virtual Vector<T, D> getCenter() const;
		/**
		 * @copydoc IShape::lower()
		 */
		virtual T lower(unsigned int dimension) const;
		/**
		 * @copydoc IShape::upper()
		 */
		virtual T upper(unsigned int dimension) const;
		/**
		 * @copydoc IShape::contains()
		 */
		virtual bool contains(Vector<T, D> const& point) const;
		/**
		 * @copydoc IShape::intersects()
		 */
		virtual bool intersects(IShape<T, D> const& other) const;
		/**
		 * @copydoc IShape::intersects()
		 */
		bool intersects(HyperPlane<T, D> const& other) const;
		/**
		 * @copydoc IShape::intersects()
		 */
		bool intersects(HyperSphere<T, D> const& other) const;
		/**
		 * @copydoc IShape::intersects()
		 */
		bool intersects(HyperRectangle<T, D> const& other) const;
		/**
		 * @copydoc IShape::resizeInclude()
		 */
		virtual void resizeInclude(IShape<T, D> const& other);
		/**
		 * @copydoc IShape::getBoundingRadius()
		 */
		virtual T getBoundingRadius() const;
		/**
		 * @brief Computes the distance between a point and this plane
		 * @param point Point to check
		 * @return Unsigned distance
		 */
		T getDistance(Vector<T, D> const& point) const;
		/**
		 * @brief Computes the distance between a plane and this plane
		 * @param plane Plane to check
		 * @return Unsigned distance
		 */
		T getDistance(HyperPlane<T, D> const& plane) const;
		/**
		 * @brief Computes the signed distance between a point and this plane
		 * @param point Point to check
		 * @return Signed distance
		 */
		T getSignedDistance(Vector<T, D> const& point) const;
		/**
		 * @brief Computes the distance between a plane and this plane
		 * @param plane Plane to check
		 * @return Signed distance
		 */
		T getSignedDistance(HyperPlane<T, D> const& plane) const;
		/**
		 * @brief The precision type used by this object
		 */
		using PrecisionType = T;
	private:
		Vector<T, D> m_base;
		Vector<T, D> m_normal;
	};

	/**
	 * @brief Two-dimensional plane, i.e. a line
	 */
	template<typename T> using Line = HyperPlane<T, 2>;
	/**
	 * @brief Three-dimensional plane
	 */
	template<typename T> using Plane = HyperPlane<T, 3>;
}

#endif /* INCLUDE_DBGL_CORE_MATH_HYPERPLANE_DEC_ */
