//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2015 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

namespace dbgl
{
	template<typename T, unsigned int D> HyperSphere<T, D>::HyperSphere()
			: m_center { }, m_radius { 1 }
	{
	}

	template<typename T, unsigned int D> HyperSphere<T, D>::HyperSphere(Vector<T, D> const& center, T radius)
			: m_center { center }, m_radius { radius }
	{
	}

	template<typename T, unsigned int D> Vector<T, D>& HyperSphere<T, D>::center()
	{
		return m_center;
	}

	template<typename T, unsigned int D> Vector<T, D> HyperSphere<T, D>::getCenter() const
	{
		return m_center;
	}

	template<typename T, unsigned int D> T& HyperSphere<T, D>::radius()
	{
		return m_radius;
	}

	template<typename T, unsigned int D> T const& HyperSphere<T, D>::getRadius() const
	{
		return m_radius;
	}

	template<typename T, unsigned int D> T HyperSphere<T, D>::lower(unsigned int dimension) const
	{
		return m_center[dimension] - m_radius;
	}

	template<typename T, unsigned int D> T HyperSphere<T, D>::upper(unsigned int dimension) const
	{
		return m_center[dimension] + m_radius;
	}

	template<typename T, unsigned int D> bool HyperSphere<T, D>::contains(Vector<T, D> const& point) const
	{
		return getSignedDistance(point) <= 0;
	}

	template<typename T, unsigned int D> bool HyperSphere<T, D>::intersects(IShape<T, D> const& other) const
	{
		HyperRectangle<T, D> const* pRect = dynamic_cast<HyperRectangle<T, D> const*>(&other);
		if (pRect)
			return intersects(*pRect);
		HyperSphere<T, D> const* pSphere = dynamic_cast<HyperSphere<T, D> const*>(&other);
		if (pSphere)
			return intersects(*pSphere);
		HyperPlane<T, D> const* pPlane = dynamic_cast<HyperPlane<T, D> const*>(&other);
		if (pPlane)
			return intersects(*pPlane);
		throw std::logic_error(
				"No way to handle intersections between spheres and your shape has been implemented yet.");
	}

	template<typename T, unsigned int D> bool HyperSphere<T, D>::intersects(HyperRectangle<T, D> const& other) const
	{
		return other.intersects(*this);
	}

	template<typename T, unsigned int D> bool HyperSphere<T, D>::intersects(HyperPlane<T, D> const& other) const
	{
		return other.intersects(*this);
	}

	template<typename T, unsigned int D> bool HyperSphere<T, D>::intersects(HyperSphere<T, D> const& other) const
	{
		return getSignedDistance(other) <= 0;
	}

	template<typename T, unsigned int D> void HyperSphere<T, D>::resizeInclude(IShape<T, D> const& other)
	{
		// Compute new bounding box. TODO: Find a better fit depending on shape
		Vector<T, D> lower, upper;
		for (unsigned int i = 0; i < D; i++)
		{
			lower[i] = std::min(this->lower(i), other.lower(i));
			upper[i] = std::max(this->upper(i), other.upper(i));
		}
		auto diagHalf = (upper - lower) / 2.0;
		m_center = lower + diagHalf;
		m_radius = diagHalf.getLength();
	}

	template<typename T, unsigned int D> void HyperSphere<T, D>::resizeInclude(HyperSphere<T, D> const& other)
	{
		// Compute connecting vector
		auto connect = m_center - other.getCenter();
		auto connectLength = connect.getLength();
		auto newRadius = ((connectLength + m_radius + other.getRadius()) / 2.0);
		connect = connect / connectLength;
		auto halfConnect = connect * newRadius;
		m_center = other.getCenter() - (connect * other.getRadius()) + halfConnect;
		m_radius = newRadius;
	}

	template<typename T, unsigned int D> T HyperSphere<T, D>::getBoundingRadius() const
	{
		return m_radius;
	}

	template<typename T, unsigned int D> T HyperSphere<T, D>::getDistance(Vector<T, D> const& point) const
	{
		return std::abs(getSignedDistance(point));
	}

	template<typename T, unsigned int D> T HyperSphere<T, D>::getDistance(HyperSphere<T, D> const& sphere) const
	{
		return std::abs(getSignedDistance(sphere));
	}

	template<typename T, unsigned int D> T HyperSphere<T, D>::getSignedDistance(Vector<T, D> const& point) const
	{
		return (point - m_center).getLength() - m_radius;
	}

	template<typename T, unsigned int D> T HyperSphere<T, D>::getSignedDistance(HyperSphere<T, D> const& sphere) const
	{
		return (sphere.m_center - m_center).getLength() - m_radius - sphere.m_radius;
	}

	template<typename T, unsigned int D> bool HyperSphere<T, D>::operator==(HyperSphere<T, D> const& other) const
	{
		return m_center == other.m_center && m_radius == other.m_radius;
	}

	template<typename T, unsigned int D> bool HyperSphere<T, D>::operator!=(HyperSphere<T, D> const& other) const
	{
		return !(*this == other);
	}
}

