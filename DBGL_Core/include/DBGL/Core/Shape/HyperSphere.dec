//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2015 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

#ifndef INCLUDE_DBGL_CORE_MATH_HYPERSPHERE_DEC_
#define INCLUDE_DBGL_CORE_MATH_HYPERSPHERE_DEC_

#include "IShape.h"
#include "DBGL/Core/Math/Vector.h"
#include "DBGL/Core/Math/SquareMatrix.h"
#include <random>
#include <algorithm>
#include <iterator>
#include <vector>

namespace dbgl
{
	template<typename T, unsigned int D> class Vector;
	template<typename T, unsigned int D> class HyperPlane;
	template<typename T, unsigned int D> class HyperRectangle;

	template<typename T, unsigned int D = 3> class HyperSphere: public IShape<T, D>
	{
	public:
		/**
		 * @brief Default constructor, initializes the sphere at the origin with radius = 1
		 */
		HyperSphere();
		/**
		 * @brief Copy constructor
		 */
		HyperSphere(HyperSphere const& other);
		/**
		 * @brief Constructs a sphere from a center point and a radius
		 * @param center Center point of the sphere
		 * @param radius Sphere radius
		 */
		HyperSphere(Vector<T, D> const& center, T radius);
		/**
		 * @brief Constructs a sphere from a point
		 * @details The sphere center will be equal to the point and have radius zero
		 * @param point1 Center point of the sphere
		 */
		HyperSphere(Vector<T, D> const& point1);
		/**
		 * @brief Constructs a sphere from two points
		 * @details The sphere will be constructed such that all points lie on its surface, such that the radius is minimal
		 * @param point1 One point
		 * @param point2 A different point
		 */
		HyperSphere(Vector<T, D> const& point1, Vector<T, D> const& point2);
		/**
		 * @brief Constructs a sphere from three points
		 * @details The sphere will be constructed such that all points lie on its surface, such that the radius is minimal
		 * @note The points may not be mutually linearly dependent
		 * @warning Only implemented for 2D and 3D!
		 * @param point1 One point
		 * @param point2 A different point
		 * @param point3 Another different point
		 */
		HyperSphere(Vector<T, D> const& point1, Vector<T, D> const& point2, Vector<T, D> const& point3);
		/**
		 * @brief Constructs a sphere from four points
		 * @details The sphere will be constructed such that all points lie on its surface, such that the radius is minimal
		 * @note The points may not be mutually linearly dependent
		 * @warning Only implemented for 2D and 3D!
		 * @param point1 One point
		 * @param point2 A different point
		 * @param point3 Another different point
		 * @param point4 Yet another different point
		 */
		HyperSphere(Vector<T, D> const& point1, Vector<T, D> const& point2, Vector<T, D> const& point3,
				Vector<T, D> const& point4);
		/**
		 * @brief Constructs a minimal sphere from a set of points, using Welzl's algorithm
		 * @param container Set of points
		 * @warning The \p container will be copied internally! If it is acceptable for the caller to modify the container
		 * 			(especially its order), then you might want to call the overload with a non-const reference.
		 */
		template<typename Container> HyperSphere(Container const& container);
		/**
		 * @brief Constructs a minimal sphere from a set of points, using Welzl's algorithm
		 * @param container Set of points
		 * @warning The \p container will be modified!
		 */
		template<typename Container> HyperSphere(Container& container);
		/**
		 * @brief Destructor
		 */
		virtual ~HyperSphere() = default;
		/**
		 * @brief Provides the sphere center
		 * @return Sphere center
		 */
		Vector<T, D>& center();
		/**
		 * @copydoc IShape::getCenter()
		 */
		virtual Vector<T, D> getCenter() const;
		/**
		 * @brief Provides the sphere radius
		 * @return Sphere radius
		 */
		T& radius();
		/**
		 * @brief Provides the sphere radius
		 * @return Sphere radius
		 */
		T const& getRadius() const;
		/**
		 * @copydoc IShape::lower()
		 */
		virtual T lower(unsigned int dimension) const;
		/**
		 * @copydoc IShape::upper()
		 */
		virtual T upper(unsigned int dimension) const;
		/**
		 * @copydoc IShape::contains()
		 */
		virtual bool contains(Vector<T, D> const& point) const;
		/**
		 * @copydoc IShape::intersects()
		 */
		virtual bool intersects(IShape<T, D> const& other) const;
		/**
		 * @copydoc IShape::intersects()
		 */
		bool intersects(HyperRectangle<T, D> const& other) const;
		/**
		 * @copydoc IShape::intersects()
		 */
		bool intersects(HyperPlane<T, D> const& other) const;
		/**
		 * @copydoc IShape::intersects()
		 */
		bool intersects(HyperSphere<T, D> const& other) const;
		/**
		 * @copydoc IShape::resizeInclude()
		 */
		virtual void resizeInclude(IShape<T, D> const& other);
		/**
		 * @copydoc IShape::resizeInclude()
		 */
		void resizeInclude(HyperSphere<T, D> const& other);
		/**
		 * @copydoc IShape::getBoundingRadius()
		 */
		virtual T getBoundingRadius() const;
		/**
		 * @brief Computes the distance between a point and this sphere
		 * @param point Point to check
		 * @return Distance
		 */
		T getDistance(Vector<T, D> const& point) const;
		/**
		 * @brief Computes the distance between a sphere and this sphere
		 * @param sphere Sphere to check
		 * @return Unsigned distance
		 */
		T getDistance(HyperSphere<T, D> const& sphere) const;
		/**
		 * @brief Computes the signed distance between a point and this sphere
		 * @param point Point to check
		 * @return Signed distance
		 */
		T getSignedDistance(Vector<T, D> const& point) const;
		/**
		 * @brief Computes the distance between a sphere and this sphere
		 * @param sphere Sphere to check
		 * @return Signed distance
		 */
		T getSignedDistance(HyperSphere<T, D> const& sphere) const;
		/**
		 * @brief Equality operator
		 * @param other Hypersphere to compare with
		 * @return True if both shapes are equal, otherwise false
		 */
		bool operator==(HyperSphere<T, D> const& other) const;
		/**
		 * @brief Inequality operator
		 * @param other Hypersphere to compare with
		 * @return False if both shapes are equal, otherwise true
		 */
		bool operator!=(HyperSphere<T, D> const& other) const;
		/**
		 * @brief Assignment operator
		 * @param other Hypersphere to copy from
		 */
		HyperSphere<T, D>& operator=(HyperSphere<T, D> const& other);
		/**
		 * @brief The precision type used by this object
		 */
		using PrecisionType = T;
	private:
		Vector<T, D> m_center;
		T m_radius;

		void fromPoints(Vector<T, D> const& point);
		void fromPoints(Vector<T, D> const& point1, Vector<T, D> const& point2);
		void fromPoints(Vector<T, D> const& point1, Vector<T, D> const& point2, Vector<T, D> const& point3);
		void fromPoints(Vector<T, D> const& point1, Vector<T, D> const& point2, Vector<T, D> const& point3,
				Vector<T, D> const& point4);
		template<typename Container> bool computeMinimal(Container& container, std::vector<Vector<T, D>> onBound);
	};

	/**
	 * @brief A two-dimensional circle
	 */
	template<typename T> using Circle = HyperSphere<T, 2>;
	/**
	 * @brief A three-dimensional sphere
	 */
	template<typename T> using Sphere = HyperSphere<T, 3>;
}

#endif /* INCLUDE_DBGL_CORE_MATH_HYPERSPHERE_DEC_ */
