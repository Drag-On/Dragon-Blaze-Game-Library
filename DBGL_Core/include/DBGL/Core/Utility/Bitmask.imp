//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2015 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

namespace dbgl
{
    template <typename T> Bitmask<T>::Bitmask(T const& mask)
    {
		m_data = mask;
    }

    template <typename T> Bitmask<T>::Bitmask(Bitmask<T> const& other)
    {
    	m_data = other.m_data;
    }

    template <typename T> unsigned int Bitmask<T>::getSize() const
    {
	    return sizeof(m_data) * std::numeric_limits<unsigned char>::digits;
    }

    template <typename T> void Bitmask<T>::set(Bitmask<T> mask)
    {
	    m_data |= mask.m_data;
    }

    template <typename T> void Bitmask<T>::clear(Bitmask<T> mask)
    {
    	m_data &= ~mask.m_data;
    }

    template <typename T> void Bitmask<T>::toggle(Bitmask<T> mask)
    {
	    m_data ^= mask.m_data;
    }

    template <typename T> bool Bitmask<T>::isSet(Bitmask<T> mask) const
    {
	    return m_data & mask.m_data;
    }

    template <typename T> std::string Bitmask<T>::toString() const
    {
		std::string str = "";
		for (unsigned int i = 0; i < getSize(); i++)
		{
			str += isSet(1 << i) ? '1' : '0';
		}
		return str;
    }

    template <typename T> Bitmask<T>& Bitmask<T>::operator=(Bitmask<T> const& rhs)
    {
		m_data = rhs.m_data;
		return *this;
    }

    template <typename T> Bitmask<T>& Bitmask<T>::operator=(T const& rhs)
    {
		m_data = rhs;
		return *this;
    }
    
    template <typename T> Bitmask<T>::operator T()
	{
	    return m_data;
	}
}
