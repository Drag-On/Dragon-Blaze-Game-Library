//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2015 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

namespace dbgl
{
	template<typename T> Matrix3x3<T>::Matrix3x3() : BaseMatrixType()
	{
	}
	
	template<typename T> Matrix3x3<T>::Matrix3x3(const BaseMatrixType &other) : BaseMatrixType(other)
	{
	}

	template<typename T> Matrix3x3<T>::~Matrix3x3()
	{
	}
	
	template<typename T> Matrix3x3<T>& Matrix3x3<T>::transpose()
	{
		auto copy(*this); // Need old values
		for(int x = 0; x < this->getWidth(); x++)
			for(int y = 0; y < this->getHeight(); y++)
				(*this)[x][y] = copy[y][x];
		return *this;
	}
	
	template<typename T> Matrix3x3<T>& Matrix3x3<T>::invert()
	{
		auto copy(*this);
		T determinant = copy[0][0] * copy[1][1] * copy[2][2] + copy[0][1] * copy[1][2] * copy[2][0] +
						copy[0][2] * copy[1][0] * copy[2][1] - copy[0][0] * copy[1][2] * copy[2][1] -
						copy[0][2] * copy[1][1] * copy[2][0] - copy[0][1] * copy[1][0] * copy[2][2];
		assert(determinant != 0);
		(*this)[0][0] = copy[1][1] * copy[2][2] - copy[2][1] * copy[1][2];
		(*this)[1][0] = copy[2][0] * copy[1][2] - copy[1][0] * copy[2][2];
		(*this)[2][0] = copy[1][0] * copy[2][1] - copy[2][0] * copy[1][1];
		(*this)[0][1] = copy[2][1] * copy[0][2] - copy[0][1] * copy[2][2];
		(*this)[1][1] = copy[0][0] * copy[2][2] - copy[2][0] * copy[0][2];
		(*this)[2][1] = copy[2][0] * copy[0][1] - copy[0][0] * copy[2][1];
		(*this)[0][2] = copy[0][1] * copy[1][2] - copy[1][1] * copy[0][2];
		(*this)[1][2] = copy[1][0] * copy[0][2] - copy[0][0] * copy[1][2];
		(*this)[2][2] = copy[0][0] * copy[1][1] - copy[1][0] * copy[0][1];
		(*this) *= 1 / determinant;
		return *this;
	}
	
	template<typename T> Matrix3x3<T> Matrix3x3<T>::getInverted() const
	{
		auto copy(*this);
		copy.invert();
		return copy;
	}
	
	template<typename T> Matrix3x3<T> Matrix3x3<T>::make2DTranslation(T x, T y)
	{
	    Matrix3x3<T> mat {};
	    mat[2][0] = x;
	    mat[2][1] = y;
	    return mat;
	}

	template<typename T> Matrix3x3<T> Matrix3x3<T>::make2DRotation(T angle)
	{
	    return makeRotationZ(angle);
	}

	template<typename T> Matrix3x3<T> Matrix3x3<T>::make2DScale(T factor)
	{
	    Matrix3x3<T> mat {};
	    mat[0][0] = factor;
	    mat[1][1] = factor;
	    mat[2][2] = 1;
	    return mat;
	}

	template<typename T> Matrix3x3<T> Matrix3x3<T>::make2DScale(T x, T y)
	{
	    Matrix3x3<T> mat{};
	    mat[0][0] = x;
	    mat[1][1] = y;
	    mat[2][2] = 1;
	    return mat;
	}


	template<typename T> Matrix3x3<T> Matrix3x3<T>::makeRotationX(T angle)
	{
		BaseMatrixType mat{};
		T cosAngle = cos(angle);
		T sinAngle = sin(angle);
		mat[1][1] = cosAngle;
		mat[2][1] = -sinAngle;
		mat[1][2] = sinAngle;
		mat[2][2] = cosAngle;
		return mat;
	}
	
	template<typename T> Matrix3x3<T> Matrix3x3<T>::makeRotationY(T angle)
	{
		BaseMatrixType mat{};
		T cosAngle = cos(angle);
		T sinAngle = sin(angle);
		mat[0][0] = cosAngle;
		mat[2][0] = sinAngle;
		mat[0][2] = -sinAngle;
		mat[2][2] = cosAngle;
		return mat;
	}
	
	template<typename T> Matrix3x3<T> Matrix3x3<T>::makeRotationZ(T angle)
	{
		BaseMatrixType mat{};
		T cosAngle = cos(angle);
		T sinAngle = sin(angle);
		mat[0][0] = cosAngle;
		mat[1][0] = -sinAngle;
		mat[0][1] = sinAngle;
		mat[1][1] = cosAngle;
		return mat;
	}
	
	template<typename T> Matrix3x3<T> Matrix3x3<T>::makeRotation(T xAngle, T yAngle, T zAngle)
	{
		return makeRotationX(xAngle) * makeRotationY(yAngle) * makeRotationZ(zAngle);
	}
	
	template<typename T> Matrix3x3<T> Matrix3x3<T>::makeRotation(Vector3<T> vec, T angle)
	{
		vec.normalize();
		BaseMatrixType mat{};
		T cosAngle = cos(angle);
		T sinAngle = sin(angle);
		mat[0][0] = vec[0] * vec[0] * (1 - cosAngle) + cosAngle;
		mat[1][0] = vec[0] * vec[1] * (1 - cosAngle) - vec[2] * sinAngle;
		mat[2][0] = vec[0] * vec[2] * (1 - cosAngle) + vec[1] * sinAngle;
		mat[0][1] = vec[1] * vec[0] * (1 - cosAngle) + vec[2] * sinAngle;
		mat[1][1] = vec[1] * vec[1] * (1 - cosAngle) + cosAngle;
		mat[2][1] = vec[1] * vec[2] * (1 - cosAngle) - vec[0] * sinAngle;
		mat[0][2] = vec[2] * vec[0] * (1 - cosAngle) - vec[1] * sinAngle;
		mat[1][2] = vec[2] * vec[1] * (1 - cosAngle) + vec[0] * sinAngle;
		mat[2][2] = vec[2] * vec[2] * (1 - cosAngle) + cosAngle;
		return mat;
	}
	
	template<typename T> Matrix3x3<T> Matrix3x3<T>::makeScale(T factor)
	{
		BaseMatrixType mat{};
		mat *= factor;
		return mat;
	}
	
	template<typename T> Matrix3x3<T> Matrix3x3<T>::makeScale(T x, T y, T z)
	{
		BaseMatrixType mat{};
		mat[0][0] *= x;
		mat[1][1] *= y;
		mat[2][2] *= z;
		return mat;
	}
	
	template<typename T> const Matrix3x3<T> Matrix3x3<T>::operator+(BaseMatrixType const& rhs) const
	{ 
		return BaseMatrixType::operator+(rhs);
	}
	
	template<typename T> const Matrix3x3<T> Matrix3x3<T>::operator-(BaseMatrixType const& rhs) const
	{ 
		return BaseMatrixType::operator-(rhs);
	}
	
	template<typename T> const Matrix3x3<T> Matrix3x3<T>::operator*(BaseMatrixType const& rhs) const
	{
		return BaseMatrixType::operator*(rhs);
	}
	
	template<typename T> const Vector3<T> Matrix3x3<T>::operator*(Vector<T,3> const& rhs) const
	{
		return BaseMatrixType::operator*(rhs);
	}
	
	template<typename T> const Matrix3x3<T> Matrix3x3<T>::operator*(T const& rhs) const
	{ 
		return BaseMatrixType::operator*(rhs);
	}

	
	template<typename T> Matrix3x3<T>& Matrix3x3<T>::operator*=(BaseMatrixType const& rhs)
	{
		auto copy(*this);
		for(int x = 0; x < this->getWidth(); x++)
			for(int y = 0; y < this->getHeight(); y++)
			{
				(*this)[x][y] = 0;
				for(int i = 0; i < this->getHeight(); i++)
					(*this)[x][y] += copy[i][y] * rhs[x][i];
			}
		return *this;
	}
	
	template<typename T> const Matrix3x3<T> Matrix3x3<T>::operator/(T const& rhs) const
	{ 
		return BaseMatrixType::operator/(rhs);
	}
	
	template<typename T> Matrix3x3<T> Matrix3x3<T>::operator-() const
	{
		return BaseMatrixType::operator-();
	}
}
