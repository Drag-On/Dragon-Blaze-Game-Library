//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2014 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// This implementation involves some pre-processor (black) magic.
// In order to prevent copy & pasting of common parts of all Vector
// specializations, the common part is included from a separate file.
// In this case deriving from a common supertype was not an option
// since operators don't work well with inheritance.
//
// Specialization was necessary since some types get promoted when
// using variadic functions; e.g. float becomes double. Using
// va_arg(args, TYPE) with the wrong type makes the program crash.
// Unfortunately constructors can not be specialized, just methods
// or whole classes.
//////////////////////////////////////////////////////////////////////

namespace dbgl
{
    /*
     * Vector<T,N>
     * General type, no specialization
     */
    #undef T
	#undef TEMPLATE_LIST
    #undef RETURN_QUALIFIER
    #define TEMPLATE_LIST typename T, unsigned int N
    #define RETURN_QUALIFIER const
    #include "Vector_Common.spart"

	template<typename T, unsigned int N> Vector<T,N>::Vector(int n, ...)
	{
		va_list args{};
		va_start(args, n);
		
		for (int i = 0; i < n && i < getDimension(); i++)
		{
		    (*this)[i] = va_arg(args, T);
		}
		
		va_end(args);
	}
	
	/*
	 * Vector<float,N>
	 * Specialized for floats
	 */
	#undef T
	#undef TEMPLATE_LIST
    #undef RETURN_QUALIFIER
    #define T float
    #define TEMPLATE_LIST unsigned int N
    #define RETURN_QUALIFIER
    #include "Vector_Common.spart"
	
	template<unsigned int N> Vector<T,N>::Vector(int n, ...)
	{
		va_list args{};
		va_start(args, n);
		
		for (int i = 0; i < n && i < getDimension(); i++)
		{
			(*this)[i] = static_cast<float>(va_arg(args, double));
		}
		
		va_end(args);
	}
	
	/*
	 * Vector<char,N>
	 * Specialized for chars
	 */
	#undef T
	#undef TEMPLATE_LIST
    #undef RETURN_QUALIFIER
	#define T char
	#define TEMPLATE_LIST unsigned int N
    #define RETURN_QUALIFIER
	#include "Vector_Common.spart"
	
	template<unsigned int N> Vector<T,N>::Vector(int n, ...)
	{
		va_list args{};
		va_start(args, n);
		
		for (int i = 0; i < n && i < getDimension(); i++)
		{
			(*this)[i] = va_arg(args, int);
		}
		
		va_end(args);
	}

	/*
	 * Vector<short,N>
	 * Specialized for shorts
	 */
	#undef T
	#undef TEMPLATE_LIST
    #undef RETURN_QUALIFIER
	#define T short
	#define TEMPLATE_LIST unsigned int N
    #define RETURN_QUALIFIER
	#include "Vector_Common.spart"
	
	template<unsigned int N> Vector<T,N>::Vector(int n, ...)
	{
		va_list args{};
		va_start(args, n);
		
		for (int i = 0; i < n && i < getDimension(); i++)
		{
			(*this)[i] = va_arg(args, int);
		}
		
		va_end(args);
	}
	
    #undef T
    #undef TEMPLATE_LIST
	
	/*
	 * Free function operators
	 */
	template<typename T, unsigned int N> const Vector<T, N> operator*(Vector<T, N> const& lhs, T const& rhs)
	{
		return lhs * rhs;
	}
	
	template<typename T, unsigned int N> const Vector<T, N> operator*(T const& lhs, Vector<T, N> const& rhs)
	{
		return rhs * lhs;
	}

}
