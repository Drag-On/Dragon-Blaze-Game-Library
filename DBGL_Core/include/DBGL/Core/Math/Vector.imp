//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2015 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

namespace dbgl
{
	template<typename T, unsigned int N> Vector<T, N>::Vector()
	{
	}

	template<typename T, unsigned int N> Vector<T, N>::Vector(T value)
	{
		std::fill_n(m_elements, N, value);
	}

	template<typename T, unsigned int N> template<unsigned int N2> Vector<T, N>::Vector(Vector<T, N2> const& other)
	{
		static_assert(N2 <= N, "Vector may not have a larger dimensionality than the constructed.");
		for (unsigned int i = 0; i < N2; i++)
			(*this)[i] = other[i];
	}

	template<typename T, unsigned int N> Vector<T, N>::Vector(Vector<T, N> const& other)
	{
		for (unsigned int i = 0; i < N; i++)
			(*this)[i] = other[i];
	}

	template<typename T, unsigned int N> Vector<T, N>::Vector(std::initializer_list<T> args)
	{
		if (args.size() > N)
			throw(std::invalid_argument { "Too many arguments." });
		unsigned int i = 0;
		for (auto n : args)
		{
			(*this)[i] = n;
			i++;
		}
	}

	template<typename T, unsigned int N> Vector<T, N>::~Vector()
	{
	}

	template<typename T, unsigned int N> inline constexpr std::size_t Vector<T, N>::getDimension()
	{
		return N;
	}

	template<typename T, unsigned int N> inline T Vector<T, N>::getSquaredLength() const
	{
		return this->dot(*this);
	}

	template<typename T, unsigned int N> inline T Vector<T, N>::getLength() const
	{
		return std::sqrt(getSquaredLength());
	}

	template<typename T, unsigned int N> Vector<T, N>& Vector<T, N>::normalize()
	{
		(*this) /= getLength();
		return *this;
	}

	template<typename T, unsigned int N> Vector<T, N> Vector<T, N>::getNormalized() const
	{
		Vector<T, N> copy(*this);
		copy.normalize();
		return copy;
	}

	template<typename T, unsigned int N> inline T Vector<T, N>::dot(Vector<T, N> const& rhs) const
	{
		return (*this) * rhs;
	}

	template<typename T, unsigned int N> Vector<T, N> Vector<T, N>::cross(Vector<T, N> const& rhs) const
	{
		Vector<T, N> copy(*this);
		copy *= rhs;
		return copy;
	}

	template<typename T, unsigned int N> bool Vector<T, N>::isZero() const
	{
		return std::all_of(std::begin(m_elements), std::end(m_elements), [](T e)
		{	return e==0;});
	}

	template<typename T, unsigned int N> bool Vector<T, N>::isSimilar(Vector<T, N> const& other, double precision) const
	{
		return ((*this) - other).getSquaredLength() <= precision * precision;
	}

	template<typename T, unsigned int N> inline T const* Vector<T, N>::getDataPointer() const
	{
		return &((*this)[0]);
	}

	template<typename T, unsigned int N> Vector<T, N>& Vector<T, N>::operator=(Vector<T, N> const& rhs)
	{
		if (*this != rhs)
		{
			for (unsigned int i = 0; i < N; i++)
				(*this)[i] = rhs[i];
		}
		return *this;
	}

	template<typename T, unsigned int N> Vector<T, N> Vector<T, N>::operator+(Vector<T, N> const& rhs) const
	{
		Vector<T, N> tmp(*this);
		tmp += rhs;
		return tmp;
	}

	template<typename T, unsigned int N> Vector<T, N>& Vector<T, N>::operator+=(Vector<T, N> const& rhs)
	{
		for (unsigned int i = 0; i < N; i++)
			(*this)[i] += rhs[i];
		return *this;
	}

	template<typename T, unsigned int N> Vector<T, N> Vector<T, N>::operator-(Vector<T, N> const& rhs) const
	{
		Vector<T, N> tmp(*this);
		tmp -= rhs;
		return tmp;
	}

	template<typename T, unsigned int N> Vector<T, N>& Vector<T, N>::operator-=(Vector<T, N> const& rhs)
	{
		for (unsigned int i = 0; i < N; i++)
			(*this)[i] -= rhs[i];
		return *this;
	}

	template<typename T, unsigned int N> T Vector<T, N>::operator*(Vector<T, N> const& rhs) const
	{
		T dotProd = 0;
		for (unsigned int i = 0; i < N; i++)
			dotProd += (*this)[i] * rhs[i];
		return dotProd;
	}

	template<typename T, unsigned int N> Vector<T, N> Vector<T, N>::operator*(T const& rhs) const
	{
		Vector<T, N> tmp(*this);
		tmp *= rhs;
		return tmp;
	}

	template<typename T, unsigned int N> Vector<T, N>& Vector<T, N>::operator*=(T const& rhs)
	{
		for (unsigned int i = 0; i < N; i++)
			(*this)[i] *= rhs;
		return *this;
	}

	template<typename T, unsigned int N> Vector<T, N>& Vector<T, N>::operator*=(Vector<T, N> const& rhs)
	{
		Vector<T, N> temp(*this); // Need copy of unmodified data
		for (unsigned int i = 0; i < N; i++)
		{
			int i1 = (i + 1) % N;
			int i2 = (i + 2) % N;
			(*this)[i] = temp[i1] * rhs[i2] - temp[i2] * rhs[i1];
		}
		return *this;
	}

	template<typename T, unsigned int N> Vector<T, N> Vector<T, N>::operator/(T const& rhs) const
	{
		Vector<T, N> tmp(*this);
		tmp /= rhs;
		return tmp;
	}

	template<typename T, unsigned int N> Vector<T, N>& Vector<T, N>::operator/=(T const& rhs)
	{
		for (unsigned int i = 0; i < N; i++)
			(*this)[i] /= rhs;
		return *this;
	}

	template<typename T, unsigned int N> Vector<T, N> Vector<T, N>::operator-() const
	{
		Vector<T, N> tmp(*this);
		for (unsigned int i = 0; i < N; i++)
			tmp[i] = -(*this)[i];
		return tmp;
	}

	template<typename T, unsigned int N> bool Vector<T, N>::operator==(Vector<T, N> const& rhs) const
	{
		for (unsigned int i = 0; i < N; i++)
			if ((*this)[i] != rhs[i])
				return false;
		return true;
	}

	template<typename T, unsigned int N> bool Vector<T, N>::operator!=(Vector<T, N> const& rhs) const
	{
		return !(*this == rhs);
	}

	template<typename T, unsigned int N> inline T& Vector<T, N>::operator[](std::size_t const& index)
	{
		return m_elements[index];
	}

	template<typename T, unsigned int N> inline T const& Vector<T, N>::operator[](std::size_t const& index) const
	{
		return m_elements[index];
	}

	/*
	 * Free function operators
	 */
	template<typename T, unsigned int N> inline Vector<T, N> operator*(Vector<T, N> const& lhs, T const& rhs)
	{
		return lhs * rhs;
	}

	template<typename T, unsigned int N> inline Vector<T, N> operator*(T const& lhs, Vector<T, N> const& rhs)
	{
		return rhs * lhs;
	}

}
