//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2014 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

namespace dbgl
{
	template<typename T> Vector3<T>::Vector3() : BaseVectorType()
	{
	}
	
	template<typename T> Vector3<T>::Vector3(T x, T y, T z) : BaseVectorType(3, x, y, z)
	{
	}
	
	template<typename T> Vector3<T>::Vector3(IMesh::Vertex const& vert) : BaseVectorType(3, vert.x, vert.y, vert.z)
	{
	}

	template<typename T> Vector3<T>::Vector3(const BaseVectorType &other) : BaseVectorType(other)
	{
	}

	template<typename T> Vector3<T>::~Vector3()
	{
	}
	
	template<typename T> const T& Vector3<T>::x() const
	{
		return (*this)[0];
	}
	
	template<typename T> T& Vector3<T>::x()
	{
		return (*this)[0];
	}
	
	template<typename T> const T& Vector3<T>::y() const
	{
		return (*this)[1];
	}
	
	template<typename T> T& Vector3<T>::y()
	{
		return (*this)[1];
	}
	
	template<typename T> const T& Vector3<T>::z() const
	{
		return (*this)[2];
	}
	
	template<typename T> T& Vector3<T>::z()
	{
		return (*this)[2];
	}
	
	template<typename T> Vector3<T>& Vector3<T>::translate(T x, T y, T z)
	{
		this->x() += x;
		this->y() += y;
		this->z() += z;
		return *this;
	}

	template<typename T> Vector3<T>& Vector3<T>::operator=(IMesh::Vertex const& vert)
	{
	    this->x() = vert.x;
	    this->y() = vert.y;
	    this->z() = vert.z;
	}

	template<typename T>  Vector3<T>::operator IMesh::Vertex() const
	{
	    return IMesh::Vertex{x(), y(), z()};
	}
}
