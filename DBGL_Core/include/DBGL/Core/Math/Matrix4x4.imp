//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2015 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

namespace dbgl
{
	template<typename T> Matrix4x4<T>::Matrix4x4()
			: BaseMatrixType()
	{
	}

	template<typename T> Matrix4x4<T>::Matrix4x4(T value)
			: BaseMatrixType(value)
	{
	}

	template<typename T> template<unsigned int N2, unsigned int M2> Matrix4x4<T>::Matrix4x4(
			Matrix<T, N2, M2> const& other)
			: BaseMatrixType(other)
	{
	}

	template<typename T> Matrix4x4<T>::Matrix4x4(std::initializer_list<Vector<T, 4>> args)
			: BaseMatrixType(args)
	{
	}

	template<typename T> Matrix4x4<T>::Matrix4x4(const BaseMatrixType &other)
			: BaseMatrixType(other)
	{
	}

	template<typename T> Matrix4x4<T>::~Matrix4x4()
	{
	}

	template<typename T> Matrix4x4<T>& Matrix4x4<T>::transpose()
	{
		auto copy = getTransposed();
		for (int x = 0; x < this->getWidth(); x++)
			(*this)[x] = copy[x];
		return *this;
	}

	template<typename T> Matrix4x4<T>& Matrix4x4<T>::invert()
	{
		Matrix4x4 copy(*this);
		auto m = copy.getDataPointer();
		T inv[16], det;
		inv[0] = m[5] * m[10] * m[15] - m[5] * m[11] * m[14] - m[9] * m[6] * m[15] + m[9] * m[7] * m[14]
				+ m[13] * m[6] * m[11] - m[13] * m[7] * m[10];
		inv[4] = -m[4] * m[10] * m[15] + m[4] * m[11] * m[14] + m[8] * m[6] * m[15] - m[8] * m[7] * m[14]
				- m[12] * m[6] * m[11] + m[12] * m[7] * m[10];
		inv[8] = m[4] * m[9] * m[15] - m[4] * m[11] * m[13] - m[8] * m[5] * m[15] + m[8] * m[7] * m[13]
				+ m[12] * m[5] * m[11] - m[12] * m[7] * m[9];
		inv[12] = -m[4] * m[9] * m[14] + m[4] * m[10] * m[13] + m[8] * m[5] * m[14] - m[8] * m[6] * m[13]
				- m[12] * m[5] * m[10] + m[12] * m[6] * m[9];
		inv[1] = -m[1] * m[10] * m[15] + m[1] * m[11] * m[14] + m[9] * m[2] * m[15] - m[9] * m[3] * m[14]
				- m[13] * m[2] * m[11] + m[13] * m[3] * m[10];
		inv[5] = m[0] * m[10] * m[15] - m[0] * m[11] * m[14] - m[8] * m[2] * m[15] + m[8] * m[3] * m[14]
				+ m[12] * m[2] * m[11] - m[12] * m[3] * m[10];
		inv[9] = -m[0] * m[9] * m[15] + m[0] * m[11] * m[13] + m[8] * m[1] * m[15] - m[8] * m[3] * m[13]
				- m[12] * m[1] * m[11] + m[12] * m[3] * m[9];
		inv[13] = m[0] * m[9] * m[14] - m[0] * m[10] * m[13] - m[8] * m[1] * m[14] + m[8] * m[2] * m[13]
				+ m[12] * m[1] * m[10] - m[12] * m[2] * m[9];
		inv[2] = m[1] * m[6] * m[15] - m[1] * m[7] * m[14] - m[5] * m[2] * m[15] + m[5] * m[3] * m[14]
				+ m[13] * m[2] * m[7] - m[13] * m[3] * m[6];
		inv[6] = -m[0] * m[6] * m[15] + m[0] * m[7] * m[14] + m[4] * m[2] * m[15] - m[4] * m[3] * m[14]
				- m[12] * m[2] * m[7] + m[12] * m[3] * m[6];
		inv[10] = m[0] * m[5] * m[15] - m[0] * m[7] * m[13] - m[4] * m[1] * m[15] + m[4] * m[3] * m[13]
				+ m[12] * m[1] * m[7] - m[12] * m[3] * m[5];
		inv[14] = -m[0] * m[5] * m[14] + m[0] * m[6] * m[13] + m[4] * m[1] * m[14] - m[4] * m[2] * m[13]
				- m[12] * m[1] * m[6] + m[12] * m[2] * m[5];
		inv[3] = -m[1] * m[6] * m[11] + m[1] * m[7] * m[10] + m[5] * m[2] * m[11] - m[5] * m[3] * m[10]
				- m[9] * m[2] * m[7] + m[9] * m[3] * m[6];
		inv[7] = m[0] * m[6] * m[11] - m[0] * m[7] * m[10] - m[4] * m[2] * m[11] + m[4] * m[3] * m[10]
				+ m[8] * m[2] * m[7] - m[8] * m[3] * m[6];
		inv[11] = -m[0] * m[5] * m[11] + m[0] * m[7] * m[9] + m[4] * m[1] * m[11] - m[4] * m[3] * m[9]
				- m[8] * m[1] * m[7] + m[8] * m[3] * m[5];
		inv[15] = m[0] * m[5] * m[10] - m[0] * m[6] * m[9] - m[4] * m[1] * m[10] + m[4] * m[2] * m[9]
				+ m[8] * m[1] * m[6] - m[8] * m[2] * m[5];

		det = m[0] * inv[0] + m[1] * inv[4] + m[2] * inv[8] + m[3] * inv[12];
		assert(det != 0);
		det = 1.0 / det;

		for (unsigned int i = 0; i < 16; i++)
			(*this)[i / 4][i % 4] = inv[i] * det;

		return *this;
	}

	template<typename T> Matrix4x4<T> Matrix4x4<T>::getInverted() const
	{
		auto copy(*this);
		copy.invert();
		return copy;
	}

	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeTranslation(T x, T y, T z)
	{
		Matrix4x4<T> mat;
		mat[3][0] = x;
		mat[3][1] = y;
		mat[3][2] = z;
		return mat;
	}

	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeTranslation(Vector3<T> translation)
	{
		Matrix4x4<T> mat;
		mat[3][0] = translation.x();
		mat[3][1] = translation.y();
		mat[3][2] = translation.z();
		return mat;
	}

	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeRotationX(T angle)
	{
		Matrix4x4<T> mat;
		T cosAngle = std::cos(angle);
		T sinAngle = std::sin(angle);
		mat[1][1] = cosAngle;
		mat[1][2] = sinAngle;
		mat[2][1] = -sinAngle;
		mat[2][2] = cosAngle;
		return mat;
	}

	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeRotationY(T angle)
	{
		Matrix4x4<T> mat;
		T cosAngle = std::cos(angle);
		T sinAngle = std::sin(angle);
		mat[0][0] = cosAngle;
		mat[0][2] = -sinAngle;
		mat[2][0] = sinAngle;
		mat[2][2] = cosAngle;
		return mat;
	}

	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeRotationZ(T angle)
	{
		Matrix4x4<T> mat;
		T cosAngle = std::cos(angle);
		T sinAngle = std::sin(angle);
		mat[0][0] = cosAngle;
		mat[0][1] = sinAngle;
		mat[1][0] = -sinAngle;
		mat[1][1] = cosAngle;
		return mat;
	}

	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeRotation(T xAngle, T yAngle, T zAngle)
	{
		return makeRotationZ(zAngle) * makeRotationY(yAngle) * makeRotationX(xAngle);
	}

	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeRotation(Vector3<T> vec, T angle)
	{
		vec.normalize();
		Matrix4x4<T> mat;
		T cosAngle = std::cos(angle);
		T sinAngle = std::sin(angle);
		mat[0][0] = vec[0] * vec[0] * (1 - cosAngle) + cosAngle;
		mat[0][1] = vec[1] * vec[0] * (1 - cosAngle) + vec[2] * sinAngle;
		mat[0][2] = vec[2] * vec[0] * (1 - cosAngle) - vec[1] * sinAngle;
		mat[1][0] = vec[0] * vec[1] * (1 - cosAngle) - vec[2] * sinAngle;
		mat[1][1] = vec[1] * vec[1] * (1 - cosAngle) + cosAngle;
		mat[1][2] = vec[2] * vec[1] * (1 - cosAngle) + vec[0] * sinAngle;
		mat[2][0] = vec[0] * vec[2] * (1 - cosAngle) + vec[1] * sinAngle;
		mat[2][1] = vec[1] * vec[2] * (1 - cosAngle) - vec[0] * sinAngle;
		mat[2][2] = vec[2] * vec[2] * (1 - cosAngle) + cosAngle;
		return mat;
	}

	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeScale(T factor)
	{
		Matrix4x4<T> mat;
		mat[0][0] = factor;
		mat[1][1] = factor;
		mat[2][2] = factor;
		return mat;
	}

	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeScale(T x, T y, T z)
	{
		Matrix4x4<T> mat;
		mat[0][0] = x;
		mat[1][1] = y;
		mat[2][2] = z;
		return mat;
	}

	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeScale(Vector3<T> scale)
	{
		Matrix4x4<T> mat;
		mat[0][0] = scale.x();
		mat[1][1] = scale.y();
		mat[2][2] = scale.z();
		return mat;
	}

	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeView(Vector3<T> const& pos, Vector3<T> const& direction,
			Vector3<T> const& up)
	{
		Matrix4x4<T> mat;
		mat.view(pos, direction, up);
		return mat;
	}

	template<typename T> void Matrix4x4<T>::view(Vector3<T> const& pos, Vector3<T> const& direction,
			Vector3<T> const& up)
	{
		auto f = direction;
		f.normalize();
		auto u = up;
		u.normalize();
		auto s = f.cross(u);
		s.normalize();
		u = s.cross(f);

		(*this)[0][0] = s[0];
		(*this)[0][1] = u[0];
		(*this)[0][2] = -f[0];
		(*this)[1][0] = s[1];
		(*this)[1][1] = u[1];
		(*this)[1][2] = -f[1];
		(*this)[2][0] = s[2];
		(*this)[2][1] = u[2];
		(*this)[2][2] = -f[2];
		(*this)[3][0] = -s * pos;
		(*this)[3][1] = -u * pos;
		(*this)[3][2] = f * pos;
	}

	template<typename T> Matrix4x4<T> Matrix4x4<T>::makeProjection(T fieldOfView, T aspectRatio, T near, T far)
	{
		Matrix4x4<T> mat { };
		mat.projection(fieldOfView, aspectRatio, near, far);
		return mat;
	}

	template<typename T> void Matrix4x4<T>::projection(T fieldOfView, T aspectRatio, T near, T far)
	{
		T h = std::tan(pi_2() - fieldOfView / 2);
		T w = h / aspectRatio;
		(*this)[0][0] = w;
		(*this)[1][1] = h;
		(*this)[2][2] = far / (near - far);
		(*this)[2][3] = -1;
		(*this)[3][2] = (near * far) / (near - far);
		(*this)[3][3] = 0;
	}

	template<typename T> inline Matrix4x4<T> Matrix4x4<T>::getTransposed() const
	{
		return BaseMatrixType::getTransposed();
	}

	template<typename T> inline Matrix4x4<T>& Matrix4x4<T>::operator=(BaseMatrixType const& rhs)
	{
		BaseMatrixType::operator=(rhs);
		return *this;
	}

	template<typename T> inline const Matrix4x4<T> Matrix4x4<T>::operator+(BaseMatrixType const& rhs) const
	{
		return BaseMatrixType::operator+(rhs);
	}

	template<typename T> inline Matrix4x4<T>& Matrix4x4<T>::operator+=(BaseMatrixType const& rhs)
	{
		BaseMatrixType::operator+=(rhs);
		return *this;
	}

	template<typename T> inline const Matrix4x4<T> Matrix4x4<T>::operator-(BaseMatrixType const& rhs) const
	{
		return BaseMatrixType::operator-(rhs);
	}

	template<typename T> inline Matrix4x4<T>& Matrix4x4<T>::operator-=(BaseMatrixType const& rhs)
	{
		BaseMatrixType::operator-=(rhs);
		return *this;
	}

	template<typename T> template<unsigned int O> inline const Matrix<T, 4, O> Matrix4x4<T>::operator*(
			Matrix<T, O, 4> const& rhs) const
	{
		return BaseMatrixType::operator*(rhs);
	}

	template<typename T> inline const Matrix4x4<T> Matrix4x4<T>::operator*(Matrix<T, 4, 4> const& rhs) const
	{
		return BaseMatrixType::operator*(rhs);
	}

	template<typename T> inline const Vector4<T> Matrix4x4<T>::operator*(Vector<T, 4> const& rhs) const
	{
		return BaseMatrixType::operator*(rhs);
	}

	template<typename T> inline const Matrix4x4<T> Matrix4x4<T>::operator*(T const& rhs) const
	{
		return BaseMatrixType::operator*(rhs);
	}

	template<typename T> inline Matrix4x4<T>& Matrix4x4<T>::operator*=(T const& rhs)
	{
		BaseMatrixType::operator*=(rhs);
		return *this;
	}

	template<typename T> inline const Matrix4x4<T> Matrix4x4<T>::operator/(T const& rhs) const
	{
		return BaseMatrixType::operator/(rhs);
	}

	template<typename T> inline Matrix4x4<T>& Matrix4x4<T>::operator/=(T const& rhs)
	{
		BaseMatrixType::operator/=(rhs);
		return *this;
	}

	template<typename T> inline Matrix4x4<T> Matrix4x4<T>::operator-() const
	{
		return BaseMatrixType::operator-();
	}

	template<typename T> inline Matrix4x4<T> operator*(Matrix<T, 4, 4> const& lhs, T const& rhs)
	{
		return lhs * rhs;
	}

	template<typename T> inline Matrix4x4<T> operator*(T const& lhs, Matrix<T, 4, 4> const& rhs)
	{
		return rhs * lhs;
	}
}
