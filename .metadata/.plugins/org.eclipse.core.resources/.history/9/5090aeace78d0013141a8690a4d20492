namespace dbgl
{
	template<typename T> Matrix4x4<T>::Matrix4x4()
	{
		_columns[0] = Vector4<T>(1,0,0,0);
		_columns[1] = Vector4<T>(0,1,0,0);
		_columns[2] = Vector4<T>(0,0,1,0);
		_columns[3] = Vector4<T>(0,0,0,1);
	}
	
	template<typename T> Matrix4x4<T>::Matrix4x4(const Matrix4x4<T> &other)
	{
		for(int x = 0; x < getWidth(); x++)
			for(int y = 0; y < getHeight(); y++)
				_columns[x][y] = other[x][y];
	}

	template<typename T> Matrix4x4<T>::~Matrix4x4()
	{
	}
	
	template<typename T> int Matrix4x4<T>::getWidth() const
	{
		return 4;
	}
	
	template<typename T> int Matrix4x4<T>::getHeight() const
	{
		return 4;
	}
	
	template<typename T> void Matrix4x4<T>::transpose()
	{
		Matrix4x4<T> copy(*this); // Need old values
		for(int x = 0; x < getWidth(); x++)
			for(int y = 0; y < getHeight(); y++)
				(*this)[x][y] = copy[y][x];
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::getTransposed() const
	{
		Matrix4x4<T> copy(*this);
		copy.transpose();
		return copy;
	}
	
	template<typename T> void Matrix4x4<T>::invert()
	{
		Matrix4x4<T> copy(*this);
		T determinant = copy[0][0] * copy[1][1] * copy[2][2] * copy[3][3] +
						copy[0][0] * copy[2][1] * copy[3][2] * copy[1][3] +
						copy[0][0] * copy[3][2] * copy[1][2] * copy[2][3] +
						
						copy[1][0] * copy[0][1] * copy[3][2] * copy[2][3] +
						copy[1][0] * copy[2][1] * copy[0][2] * copy[3][3] +
						copy[1][0] * copy[3][1] * copy[2][2] * copy[0][3] +
						
						copy[2][0] * copy[0][1] * copy[1][2] * copy[3][3] +
						copy[2][0] * copy[1][1] * copy[3][2] * copy[0][3] +
						copy[2][0] * copy[3][1] * copy[0][2] * copy[1][3] +
						
						copy[3][0] * copy[0][1] * copy[2][2] * copy[1][3] +
						copy[3][0] * copy[1][1] * copy[0][2] * copy[2][3] +
						copy[3][0] * copy[2][1] * copy[1][2] * copy[0][3] -
						
						copy[0][0] * copy[1][1] * copy[3][2] * copy[2][3] -
						copy[0][0] * copy[2][1] * copy[1][2] * copy[3][3] -
						copy[0][0] * copy[3][1] * copy[2][2] * copy[1][3] -
						
						copy[1][0] * copy[0][1] * copy[2][2] * copy[3][3] -
						copy[1][0] * copy[2][1] * copy[3][2] * copy[0][3] -
						copy[1][0] * copy[3][1] * copy[0][2] * copy[2][3] -
						
						copy[2][0] * copy[0][1] * copy[3][2] * copy[1][3] -
						copy[2][0] * copy[1][1] * copy[0][2] * copy[3][3] -
						copy[2][0] * copy[3][1] * copy[1][2] * copy[0][3] -
						
						copy[3][0] * copy[0][1] * copy[1][2] * copy[2][3] -
						copy[3][0] * copy[1][1] * copy[2][2] * copy[0][3] -
						copy[3][0] * copy[2][1] * copy[0][2] * copy[1][3];
		assert(determinant != 0);
		(*this)[0][0] = copy[1][1] * copy[2][2] * copy[3][3] +
						copy[2][1] * copy[3][2] * copy[1][3] +
						copy[3][1] * copy[1][2] * copy[2][3] -
						copy[1][1] * copy[3][2] * copy[2][3] -
						copy[2][1] * copy[1][2] * copy[3][3] -
						copy[3][1] * copy[2][2] * copy[1][3];
		(*this)[1][0] = copy[1][0] * copy[3][2] * copy[2][3] +
						copy[2][0] * copy[1][2] * copy[3][3] +
						copy[3][0] * copy[2][2] * copy[1][3] -
						copy[1][0] * copy[2][2] * copy[3][3] -
						copy[2][0] * copy[3][2] * copy[1][3] -
						copy[3][0] * copy[1][2] * copy[2][3];
		(*this)[2][0] = copy[1][0] * copy[2][1] * copy[3][3] +
						copy[2][0] * copy[3][1] * copy[1][3] +
						copy[3][1] * copy[1][1] * copy[2][3] -
						copy[1][0] * copy[3][2] * copy[2][3] -
						copy[2][0] * copy[1][1] * copy[3][3] -
						copy[3][0] * copy[2][1] * copy[1][3];
		(*this)[3][0] = copy[1][0] * copy[3][1] * copy[2][2] +
						copy[2][0] * copy[1][1] * copy[3][2] +
						copy[3][0] * copy[2][1] * copy[1][2] -
						copy[1][0] * copy[2][1] * copy[3][2] -
						copy[2][0] * copy[3][1] * copy[1][2] -
						copy[3][0] * copy[1][1] * copy[2][2];
		(*this)[0][1] = copy[0][1] * copy[3][2] * copy[2][3] +
						copy[2][1] * copy[0][2] * copy[3][3] +
						copy[3][1] * copy[2][2] * copy[0][3] -
						copy[0][1] * copy[2][2] * copy[3][3] -
						copy[2][1] * copy[3][2] * copy[0][3] -
						copy[3][1] * copy[0][2] * copy[2][3];
		(*this)[1][1] = copy[0][0] * copy[2][2] * copy[3][3] +
						copy[2][0] * copy[3][2] * copy[0][3] +
						copy[3][0] * copy[0][2] * copy[2][3] -
						copy[0][0] * copy[3][2] * copy[2][3] -
						copy[2][0] * copy[0][2] * copy[3][3] -
						copy[3][0] * copy[2][2] * copy[0][3];
		(*this)[2][1] = copy[0][0] * copy[3][1] * copy[2][3] +
						copy[2][0] * copy[0][1] * copy[3][3] +
						copy[3][0] * copy[2][1] * copy[0][3] -
						copy[0][0] * copy[2][1] * copy[3][3] -
						copy[2][0] * copy[3][1] * copy[0][3] -
						copy[3][0] * copy[0][1] * copy[2][3];
		(*this)[3][1] = copy[0][0] * copy[2][1] * copy[3][2] +
						copy[2][0] * copy[3][1] * copy[0][2] +
						copy[3][0] * copy[0][1] * copy[2][2] -
						copy[0][0] * copy[3][1] * copy[2][2] -
						copy[2][0] * copy[0][1] * copy[3][2] -
						copy[3][0] * copy[2][1] * copy[0][2];
		(*this)[0][2] = copy[0][1] * copy[1][2] * copy[3][3] +
						copy[1][1] * copy[3][2] * copy[0][3] +
						copy[3][1] * copy[0][2] * copy[1][3] -
						copy[0][1] * copy[3][2] * copy[1][3] -
						copy[1][1] * copy[0][2] * copy[3][3] -
						copy[3][1] * copy[1][2] * copy[0][3];
		(*this)[1][2] = copy[0][0] * copy[3][2] * copy[1][3] +
						copy[1][0] * copy[0][2] * copy[3][3] +
						copy[3][0] * copy[1][2] * copy[0][3] -
						copy[0][0] * copy[1][2] * copy[3][3] -
						copy[1][0] * copy[3][2] * copy[0][3] -
						copy[3][0] * copy[0][2] * copy[1][3];
		(*this)[2][2] = copy[0][0] * copy[1][1] * copy[3][3] +
						copy[1][0] * copy[3][1] * copy[0][3] +
						copy[3][0] * copy[0][1] * copy[1][3] -
						copy[0][0] * copy[3][1] * copy[1][3] -
						copy[1][0] * copy[0][1] * copy[3][3] -
						copy[3][0] * copy[1][1] * copy[0][3];
		(*this)[3][2] = copy[0][0] * copy[3][1] * copy[1][2] +
						copy[1][0] * copy[0][1] * copy[3][2] +
						copy[3][0] * copy[1][1] * copy[0][2] -
						copy[0][0] * copy[1][1] * copy[3][2] -
						copy[1][0] * copy[3][1] * copy[0][2] -
						copy[3][0] * copy[0][1] * copy[1][2];
		(*this) *= 1 / determinant;
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::getInverted() const
	{
		Matrix4x4<T> copy(*this);
		copy.invert();
		return copy;
	}
	
	template<typename T> bool Matrix4x4<T>::isZero()
	{
		for(int i = 0; i < getWidth(); i++)
			if(!(*this)[i].isZero())
				return false;
		return true;
	}
	
	template<typename T> bool Matrix4x4<T>::isIdentity()
	{
		for(int x = 0; x < getWidth(); x++)
			for(int y = 0; y < getHeight(); y++)
			{
				if(x == y && (*this)[x][y] != 1)
					return false;
				if(x != y && (*this)[x][y] != 0)
					return false;
			}
		return true;
	}
	
	template<typename T> Matrix4x4<T>& Matrix4x4<T>::operator=(Matrix4x4<T> const& rhs) 
	{ 
		if (*this != rhs)
		{ 
			for(int i = 0; i < getWidth(); i++)
				(*this)[i] = rhs[i];
		} 
		return *this;
	}
	
	template<typename T> const Matrix4x4<T> Matrix4x4<T>::operator+(Matrix4x4<T> const& rhs) 
	{ 
		Matrix4x4<T> tmp(*this);
		tmp += rhs;
		return tmp;
	}
	
	template<typename T> Matrix4x4<T>& Matrix4x4<T>::operator+=(Matrix4x4<T> const& rhs)
	{
		for(int i = 0; i < getWidth(); i++)
			(*this)[i] += rhs[i];
		return *this;
	}
	
	template<typename T> const Matrix4x4<T> Matrix4x4<T>::operator-(Matrix4x4<T> const& rhs) 
	{ 
		Matrix4x4<T> tmp(*this);
		tmp -= rhs;
		return tmp;
	}
		
	template<typename T> Matrix4x4<T>& Matrix4x4<T>::operator-=(Matrix4x4<T> const& rhs)
	{
		for(int i = 0; i < getWidth(); i++)
			(*this)[i] -= rhs[i];
		return *this;
	}
	
	template<typename T> const Matrix4x4<T> Matrix4x4<T>::operator*(Matrix4x4<T> const& rhs) 
	{
		Matrix4x4<T> copy(*this);
		copy *= rhs;
		return copy;
	}
	
	template<typename T> const Vector4<T> Matrix4x4<T>::operator*(Vector4<T> const& rhs)
	{
		Vector4<T> vec;
		for(int y = 0; y < getHeight(); y++)
			for(int x = 0; x < getWidth(); x++)
				vec[y] += (*this)[x][y] * rhs[x];
		return vec;
	}
	
	template<typename T> const Matrix4x4<T> Matrix4x4<T>::operator*(T const& rhs) 
	{ 
		Matrix4x4<T> tmp(*this);
		tmp *= rhs;
		return tmp;
	}
	
	template<typename T> Matrix4x4<T>& Matrix4x4<T>::operator*=(Matrix4x4<T> const& rhs) 
	{
		Matrix4x4<T> copy(*this);
		for(int x = 0; x < getWidth(); x++)
			for(int y = 0; y < getHeight(); y++)
			{
				(*this)[x][y] = 0;
				for(int i = 0; i < getHeight(); i++)
					(*this)[x][y] += copy[i][y] * rhs[x][i];
			}
		return *this;
	}
		
	template<typename T> Matrix4x4<T>& Matrix4x4<T>::operator*=(T const& rhs)
	{
		for(int x = 0; x < getWidth(); x++)
			for(int y = 0; y < getHeight(); y++)
				(*this)[x][y] *= rhs;
		return *this;
	}
	
	template<typename T> const Matrix4x4<T> Matrix4x4<T>::operator/(T const& rhs) 
	{ 
		Matrix4x4<T> tmp(*this);
		tmp /= rhs;
		return tmp;
	}
		
	template<typename T> Matrix4x4<T>& Matrix4x4<T>::operator/=(T const& rhs)
	{
		for(int x = 0; x < getWidth(); x++)
			for(int y = 0; y < getHeight(); y++)
				(*this)[x][y] /= rhs;
		return *this;
	}
	
	template<typename T> Matrix4x4<T> Matrix4x4<T>::operator-() const
	{
		Matrix4x4<T> tmp(*this);
		for(int x = 0; x < getWidth(); x++)
			for(int y = 0; y < getHeight(); y++)
				tmp[x][y] = -(*this)[x][y];
		return tmp;
	}
	
	template<typename T> bool Matrix4x4<T>::operator==(Matrix4x4<T> const& rhs)
	{
		for(int x = 0; x < getWidth(); x++)
			for(int y = 0; y < getHeight(); y++)
				if((*this)[x][y] != rhs[x][y])
					return false;
		return true;
	}
	
	template<typename T> bool Matrix4x4<T>::operator!=(Matrix4x4<T> const& rhs)
	{
		return !(*this == rhs);
	}

	template<typename T> Vector4<T>& Matrix4x4<T>::operator[](std::size_t const& index)
	{
		assert(index < getWidth());
		return _columns[index];
	}
	
	template<typename T> const Vector4<T>& Matrix4x4<T>::operator[](std::size_t const& index) const
	{
		assert(index < getWidth());
		return _columns[index];
	}
}
