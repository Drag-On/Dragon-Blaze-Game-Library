//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2014 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

#ifndef VECTOR_H_
#define VECTOR_H_

#include<cstddef>
#include<cmath>

namespace dbgl
{
	template<typename T, unsigned int N> class Vector
	{
	public:
		// Constructors
		Vector();
		Vector(const Vector<T,N> &other);
		// Destructors
		~Vector();
		// Methods
		std::size_t getDimension() const;
		T getSquaredLength() const;
		T getLength() const;
		void normalize();
		Vector<T,N> getNormalized() const;
		Vector<T,N> getCrossProduct(Vector<T,N> rhs);
		bool isZero();
		// Operators
		Vector<T,N>& operator=(Vector<T,N> const& rhs);
		const Vector<T,N> operator+(Vector<T,N> const& rhs);
		Vector<T,N>& operator+=(Vector<T,N> const& rhs);
		const Vector<T,N> operator-(Vector<T,N> const& rhs);
		Vector<T,N>& operator-=(Vector<T,N> const& rhs);
		const T operator*(Vector<T,N> const& rhs);
		const Vector<T,N> operator*(T const& rhs);
		Vector<T,N>& operator*=(T const& rhs);
		Vector<T,N>& operator*=(Vector<T,N> const& rhs);
		const Vector<T,N> operator/(T const& rhs);
		Vector<T,N>& operator/=(T const& rhs);
		Vector<T,N> operator-() const;
		bool operator==(Vector<T,N> const& rhs);
		bool operator!=(Vector<T,N> const& rhs);
		bool operator<(Vector<T,N> const& rhs);
		bool operator>(Vector<T,N> const& rhs);
		bool operator<=(Vector<T,N> const& rhs);
		bool operator>=(Vector<T,N> const& rhs);
		T& operator[](std::size_t const& index);
		const T& operator[](std::size_t const& index) const;

	private:
		T _elements[N];
	};
}

#include "Vector.imp"

#endif /* VECTOR_H_ */
