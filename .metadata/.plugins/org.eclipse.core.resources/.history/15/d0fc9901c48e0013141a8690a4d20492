//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2014 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

#ifndef MATRIX3X3_H_
#define MATRIX3X3_H_

#include "Vector3.h"

namespace dbgl
{
	/// <summary>
	/// @brief Matrix of size 3 by 3
	/// @author Jan Moeller
	/// </summary>
	template<typename T> class Matrix3x3
	{
	public:
		// Constructors
		/// <summary>
		/// @brief Constructs a 3x3 identity matrix
		/// </summary>
		Matrix3x3();
		/// <summary>
		/// @brief Copies another 3x3 matrix
		/// </summary>
		Matrix3x3(const Matrix3x3<T> &other);
		// Destructors
		~Matrix3x3();
		// Methods
		int getWidth() const;
		int getHeight() const;
		void transpose();
		Matrix3x3<T> getTransposed() const;
		void invert();
		Matrix3x3<T> getInverted() const;
		bool isZero();
		bool isIdentity();
		// Operators
		Matrix3x3<T>& operator=(Matrix3x3<T> const& rhs);
		const Matrix3x3<T> operator+(Matrix3x3<T> const& rhs);
		Matrix3x3<T>& operator+=(Matrix3x3<T> const& rhs);
		const Matrix3x3<T> operator-(Matrix3x3<T> const& rhs);
		Matrix3x3<T>& operator-=(Matrix3x3<T> const& rhs);
		const Matrix3x3<T> operator*(Matrix3x3<T> const& rhs);
		const Vector3<T> operator*(Vector3<T> const& rhs);
		const Matrix3x3<T> operator*(T const& rhs);
		Matrix3x3<T>& operator*=(Matrix3x3<T> const& rhs);
		Matrix3x3<T>& operator*=(T const& rhs);
		const Matrix3x3<T> operator/(T const& rhs);
		Matrix3x3<T>& operator/=(T const& rhs);
		Matrix3x3<T> operator-() const;
		bool operator==(Matrix3x3<T> const& rhs);
		bool operator!=(Matrix3x3<T> const& rhs);
		Vector3<T>& operator[](std::size_t const& index);
		const Vector3<T>& operator[](std::size_t const& index) const;

	private:
		Vector3<T> _columns[3];
	};
}

#include "Matrix3x3.imp"

#endif /* MATRIX3X3_H_ */
