#ifndef MATRIX2X2_H_
#define MATRIX2X2_H_

#include <cstring>
#include "Vector2.h"

namespace dbgl
{
	/// <summary>
	/// Matrix of size 2 by 2
	/// </summary>
	template<typename T> class Matrix2x2
	{
	public:
		// Constructors
		Matrix2x2();
		Matrix2x2(Matrix2x2<T> &other);
		// Destructors
		~Matrix2x2();
		// Methods
		Vector2<int> getDimension() const;
		void transpose();
		Matrix2x2<T> getTransposed() const;
		void invert();
		Matrix2x2<T> getInverted() const;
		bool isZero();
		// Operators
		Matrix2x2<T>& operator=(Matrix2x2<T> const& rhs);
		const Matrix2x2<T> operator+(Matrix2x2<T> const& rhs);
		Matrix2x2<T>& operator+=(Matrix2x2<T> const& rhs);
		const Matrix2x2<T> operator-(Matrix2x2<T> const& rhs);
		Matrix2x2<T>& operator-=(Matrix2x2<T> const& rhs);
		const Matrix2x2<T> operator*(Matrix2x2<T> const& rhs);
		const Matrix2x2<T> operator*(Vector2<T> const& rhs);
		const Matrix2x2<T> operator*(T const& rhs);
		Matrix2x2<T>& operator*=(T const& rhs);
		Matrix2x2<T>& operator*=(Vector2<T> const& rhs);
		Matrix2x2<T>& operator*=(Matrix2x2<T> const& rhs);
		const Matrix2x2<T> operator/(T const& rhs);
		Matrix2x2<T>& operator/=(T const& rhs);
		Matrix2x2<T> operator-() const;
		bool operator==(Vector2<T> const& rhs);
		bool operator!=(Vector2<T> const& rhs);
		bool operator<(Vector2<T> const& rhs);
		bool operator>(Vector2<T> const& rhs);
		bool operator<=(Vector2<T> const& rhs);
		bool operator>=(Vector2<T> const& rhs);
		T& operator[](std::size_t const& index);
		const T& operator[](std::size_t const& index) const;

	private:
		Vector2<T> _columns[2];
	};
}

#include "Matrix2x2.imp"

#endif /* MATRIX2X2_H_ */
