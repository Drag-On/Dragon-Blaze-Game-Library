namespace dbgl
{
	template<typename T, unsigned int N> Vector<T, unsigned int>::Vector()
	{
		for(int i = 0; i < getDimension(); i++)
			(*this)[i] = 0;
	}
	
	template<typename T, unsigned int N> Vector<T, unsigned int>::Vector(const Vector<T, unsigned int> &other)
	{
		assert(this->getDimension() == other.getDimension());
		for(int i = 0; i < getDimension(); i++)
			(*this)[i] = other[i];
	}

	template<typename T, unsigned int N> Vector<T, unsigned int>::~Vector()
	{
	}
	
	template<typename T, unsigned int N> std::size_t Vector<T, unsigned int>::getDimension() const
	{
		return dimension;
	}
	
	template<typename T, unsigned int N> T Vector<T, unsigned int>::getSquaredLength() const
	{
		T sqlen = 0;
		for(int i = 0; i < getDimension(); i++)
			sqlen += (*this)[i] * (*this)[i];
		return sqlen;
	}
	
	template<typename T, unsigned int N> T Vector<T, unsigned int>::getLength() const
	{
		return static_cast<T>(std::sqrt(static_cast<double>(getSquaredLength())));
	}
	
	template<typename T, unsigned int N> void Vector<T, unsigned int>::normalize()
	{
		T length = getLength();
		for(int i = 0; i < getDimension(); i++)
			(*this)[i] /= length;
	}
	
	template<typename T, unsigned int N> Vector<T, unsigned int> Vector<T, unsigned int>::getNormalized() const
	{
		Vector<T, unsigned int> copy(*this);
		copy.normalize();
		return copy;
	}
	
	template<typename T, unsigned int N> Vector<T, unsigned int> Vector<T, unsigned int>::getCrossProduct(Vector<T, unsigned int> rhs)
	{
		Vector<T, unsigned int> copy(*this);
		copy *= rhs;
		return copy;
	}
	
	template<typename T, unsigned int N> bool Vector<T, unsigned int>::isZero()
	{
		for(int i = 0; i < getDimension(); i++)
			if((*this)[i] != 0)
				return false;
		return true;
	}
	
	template<typename T, unsigned int N> Vector<T, unsigned int>& Vector<T, unsigned int>::operator=(Vector<T, unsigned int> const& rhs) 
	{ 
		if (*this != rhs)
		{ 
			for(int i = 0; i < getDimension(); i++)
				(*this)[i] = rhs[i];
		} 
		return *this;
	}
	
	template<typename T, unsigned int N> const Vector<T, unsigned int> Vector<T, unsigned int>::operator+(Vector<T, unsigned int> const& rhs) 
	{ 
		Vector<T, unsigned int> tmp(*this);
		tmp += rhs;
		return tmp;
	}
	
	template<typename T, unsigned int N> Vector<T, unsigned int>& Vector<T, unsigned int>::operator+=(Vector<T, unsigned int> const& rhs)
	{
		for(int i = 0; i < getDimension(); i++)
			(*this)[i] += rhs[i];
		return *this;
	}
	
	template<typename T, unsigned int N> const Vector<T, unsigned int> Vector<T, unsigned int>::operator-(Vector<T, unsigned int> const& rhs) 
	{ 
		Vector<T, unsigned int> tmp(*this);
		tmp -= rhs;
		return tmp;
	}
		
	template<typename T, unsigned int N> Vector<T, unsigned int>& Vector<T, unsigned int>::operator-=(Vector<T, unsigned int> const& rhs)
	{
		for(int i = 0; i < getDimension(); i++)
			(*this)[i] -= rhs[i];
		return *this;
	}
	
	template<typename T, unsigned int N> const T Vector<T, unsigned int>::operator*(Vector<T, unsigned int> const& rhs) 
	{
		T dotProd = 0;
		for(int i = 0; i < getDimension(); i++)
			dotProd += (*this)[i] * rhs[i];
		return dotProd;
	}
	
	template<typename T, unsigned int N> const Vector<T, unsigned int> Vector<T, unsigned int>::operator*(T const& rhs) 
	{ 
		Vector<T, unsigned int> tmp(*this);
		tmp *= rhs;
		return tmp;
	}
		
	template<typename T, unsigned int N> Vector<T, unsigned int>& Vector<T, unsigned int>::operator*=(T const& rhs)
	{
		for(int i = 0; i < getDimension(); i++)
			(*this)[i] *= rhs;
		return *this;
	}
	
	template<typename T, unsigned int N> Vector<T, unsigned int>& Vector<T, unsigned int>::operator*=(Vector<T, unsigned int> const& rhs)
	{
		auto temp(*this); // Need copy of unmodified data
		for(int i = 0; i < getDimension(); i++)
		{
			int i1 = (i+1) % getDimension();
			int i2 = (i+2) % getDimension();
			(*this)[i] = temp[i1]*rhs[i2] - temp[i2]*rhs[i1];
		}
		return *this;
	}
	
	template<typename T, unsigned int N> const Vector<T, unsigned int> Vector<T, unsigned int>::operator/(T const& rhs) 
	{ 
		Vector<T, unsigned int> tmp(*this);
		tmp /= rhs;
		return tmp;
	}
		
	template<typename T, unsigned int N> Vector<T, unsigned int>& Vector<T, unsigned int>::operator/=(T const& rhs)
	{
		for(int i = 0; i < getDimension(); i++)
			(*this)[i] /= rhs;
		return *this;
	}
	
	template<typename T, unsigned int N> Vector<T, unsigned int> Vector<T, unsigned int>::operator-() const
	{
		Vector<T, unsigned int> tmp(*this);
		for(int i = 0; i < getDimension(); i++)
			tmp[i] = -(*this)[i];
		return tmp;
	}
	
	template<typename T, unsigned int N> bool Vector<T, unsigned int>::operator==(Vector<T, unsigned int> const& rhs)
	{
		for(int i = 0; i < getDimension(); i++)
			if((*this)[i] != rhs[i])
				return false;
		return true;
	}
	
	template<typename T, unsigned int N> bool Vector<T, unsigned int>::operator!=(Vector<T, unsigned int> const& rhs)
	{
		return !(*this == rhs);
	}
	
	template<typename T, unsigned int N> bool Vector<T, unsigned int>::operator<(Vector<T, unsigned int> const& rhs)
	{
		return this->getLength() < rhs.getLength();
	}
	
	template<typename T, unsigned int N> bool Vector<T, unsigned int>::operator>(Vector<T, unsigned int> const& rhs)
	{
		return this->getLength() > rhs.getLength();
	}
	
	template<typename T, unsigned int N> bool Vector<T, unsigned int>::operator<=(Vector<T, unsigned int> const& rhs)
	{
		return this->getLength() <= rhs.getLength();
	}
	
	template<typename T, unsigned int N> bool Vector<T, unsigned int>::operator>=(Vector<T, unsigned int> const& rhs)
	{
		return this->getLength() >= rhs.getLength();
	}

	template<typename T, unsigned int N> T& Vector<T, unsigned int>::operator[](std::size_t const& index)
	{
		assert(index < getDimension());
		return _elements[index];
	}
	
	template<typename T, unsigned int N> const T& Vector<T, unsigned int>::operator[](std::size_t const& index) const
	{
		assert(index < getDimension());
		return _elements[index];
	}
}
