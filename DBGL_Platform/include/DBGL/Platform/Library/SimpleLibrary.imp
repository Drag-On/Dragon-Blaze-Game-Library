//////////////////////////////////////////////////////////////////////
/// Dragon Blaze Game Library
///
/// Copyright (c) 2014 by Jan Moeller
///
/// This software is provided "as-is" and does not claim to be
/// complete or free of bugs in any way. It should work, but
/// it might also begin to hurt your kittens.
//////////////////////////////////////////////////////////////////////

namespace dbgl
{
    template<class Base> SimpleLibrary<Base>::SimpleLibrary(std::string const& path) : m_lib{path}
    {
    }

    template<class Base> SimpleLibrary<Base>::SimpleLibrary(Filename const& path) : m_lib{path}
    {
    }

    template<class Base> SimpleLibrary<Base>::~SimpleLibrary()
    {
	if (m_pDestroy)
	    m_pDestroy(m_pClass);
    }

    template<class Base> bool SimpleLibrary<Base>::load()
    {
	if(!m_lib.load())
	    return false;
	m_pCreate = reinterpret_cast<CreateFunc>(m_lib.getFunction("create"));
	m_pDestroy = reinterpret_cast<DestroyFunc>(m_lib.getFunction("destroy"));
	if(!m_pCreate || !m_pDestroy)
	    return false;
	m_pClass = m_pCreate();
	return true;
    }

    template<typename Base> Base* SimpleLibrary<Base>::get()
    {
	return m_pClass;
    }

    template<typename Base> SimpleLibrary<Base>::SimpleLibrary(SimpleLibrary<Base>&& other) :
	    m_lib{other.m_lib}, m_pClass{other.m_pClass}, m_pCreate{other.m_pCreate}, m_pDestroy{other.m_pDestroy}
    {
	other.m_pClass = nullptr;
	other.m_pCreate = nullptr;
	other.m_pDestroy = nullptr;
    }

    template<typename Base> SimpleLibrary<Base>& SimpleLibrary<Base>::operator=(SimpleLibrary<Base>&& other)
    {
	if (this != &other)
	{
	    m_lib = other.m_lib;
	    m_pClass = other.m_pClass;
	    m_pCreate = other.m_pCreate;
	    m_pDestroy = other.m_pDestroy;
	    other.m_pClass = nullptr;
	    other.m_pCreate = nullptr;
	    other.m_pDestroy = nullptr;
	}
	return *this;
    }
}


